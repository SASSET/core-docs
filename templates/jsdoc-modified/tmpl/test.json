[
    {
        "comment": "/**\n * Asset Mongoose Model - Used to create/edit/delete any Asset documents, as well as MDB documents in the Field, \n * Partition and Revision collections that may be associated to the the Asset(s)\n * \n * @module AssetModel\n * @see {@link http://mongoosejs.com/|Mongoose NodeJS Module}\n * @see {@link http://mongoosejs.com/docs/documents.html|Mongoose Documents}\n * @see {@link http://mongoosejs.com/docs/middleware.html|Mongoose Middleware}\n * @see {@link http://mongoosejs.com/docs/guide.html|Mongoose Schema}\n * @see {@link http://mongoosejs.com/docs/schematypes.html|Mongoose Schema Types}\n * @see {@link http://bluebirdjs.com/docs/api-reference.html|Bluebird Promise API}\n */",
        "meta": {
            "range": [
                0,
                681
            ],
            "filename": "Asset.js",
            "lineno": 1,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Asset Mongoose Model - Used to create/edit/delete any Asset documents, as well as MDB documents in the Field, \nPartition and Revision collections that may be associated to the the Asset(s)",
        "kind": "module",
        "name": "AssetModel",
        "see": [
            "{@link http://mongoosejs.com/|Mongoose NodeJS Module}",
            "{@link http://mongoosejs.com/docs/documents.html|Mongoose Documents}",
            "{@link http://mongoosejs.com/docs/middleware.html|Mongoose Middleware}",
            "{@link http://mongoosejs.com/docs/guide.html|Mongoose Schema}",
            "{@link http://mongoosejs.com/docs/schematypes.html|Mongoose Schema Types}",
            "{@link http://bluebirdjs.com/docs/api-reference.html|Bluebird Promise API}"
        ],
        "longname": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                744,
                784
            ],
            "filename": "Asset.js",
            "lineno": 16,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000004",
                "name": "_",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_",
        "longname": "module:AssetModel~_",
        "kind": "constant",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                791,
                828
            ],
            "filename": "Asset.js",
            "lineno": 17,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000010",
                "name": "Promise",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Promise",
        "longname": "module:AssetModel~Promise",
        "kind": "constant",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                835,
                869
            ],
            "filename": "Asset.js",
            "lineno": 18,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000016",
                "name": "Async",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Async",
        "longname": "module:AssetModel~Async",
        "kind": "constant",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                876,
                909
            ],
            "filename": "Asset.js",
            "lineno": 19,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000022",
                "name": "Util",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Util",
        "longname": "module:AssetModel~Util",
        "kind": "constant",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                916,
                958
            ],
            "filename": "Asset.js",
            "lineno": 20,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000028",
                "name": "AppRoot",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "AppRoot",
        "longname": "module:AssetModel~AppRoot",
        "kind": "constant",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                965,
                998
            ],
            "filename": "Asset.js",
            "lineno": 21,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000034",
                "name": "Path",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Path",
        "longname": "module:AssetModel~Path",
        "kind": "constant",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1005,
                1043
            ],
            "filename": "Asset.js",
            "lineno": 22,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000040",
                "name": "Columnify",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Columnify",
        "longname": "module:AssetModel~Columnify",
        "kind": "constant",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1051,
                1117
            ],
            "filename": "Asset.js",
            "lineno": 24,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000046",
                "name": "_m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_m",
        "longname": "module:AssetModel~_m",
        "kind": "constant",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1124,
                1167
            ],
            "filename": "Asset.js",
            "lineno": 25,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000054",
                "name": "ModelName",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ModelName",
        "longname": "module:AssetModel~ModelName",
        "kind": "constant",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1174,
                1256
            ],
            "filename": "Asset.js",
            "lineno": 26,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000062",
                "name": "Log",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Log",
        "longname": "module:AssetModel~Log",
        "kind": "constant",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1232,
                1253
            ],
            "filename": "Asset.js",
            "lineno": 26,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000071",
                "name": "model",
                "type": "TemplateLiteral",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "model",
        "longname": "module:AssetModel~model",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1263,
                1313
            ],
            "filename": "Asset.js",
            "lineno": 27,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000077",
                "name": "AccountLib",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "AccountLib",
        "longname": "module:AssetModel~AccountLib",
        "kind": "constant",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "/**\n * @name        AssetModel\n * @param       {Mongoose}          Mongoose            Mongoose instance\n * @property    {Object}            Mongoose.Schema     Schema thingy\n * @property    {Object}            Mongoose.Types      Mongoose document attribute types\n * @returns     {Mongoose.model}    Asset Mongoose model\n */",
        "meta": {
            "range": [
                1349,
                1674
            ],
            "filename": "Asset.js",
            "lineno": 31,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "name": "AssetModel",
        "params": [
            {
                "type": {
                    "names": [
                        "Mongoose"
                    ]
                },
                "description": "Mongoose instance",
                "name": "Mongoose"
            }
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Schema thingy",
                "name": "Mongoose.Schema"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Mongoose document attribute types",
                "name": "Mongoose.Types"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mongoose.model"
                    ]
                },
                "description": "Asset Mongoose model"
            }
        ],
        "longname": "module:AssetModel~AssetModel",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1681,
                87543
            ],
            "filename": "Asset.js",
            "lineno": 38,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000092",
                "name": "AssetModel",
                "type": "AssignmentExpression",
                "value": "module.exports"
            }
        },
        "undocumented": true,
        "name": "AssetModel",
        "longname": "module:AssetModel~AssetModel",
        "kind": "constant",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1694,
                87543
            ],
            "filename": "Asset.js",
            "lineno": 38,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000094",
                "name": "module.exports",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "Mongoose"
                ]
            },
            "vars": {
                "Schema": "module:AssetModel~Schema",
                "Types": "module:AssetModel~Types",
                "AssetSchema": "module:AssetModel~AssetSchema",
                "": null,
                "AssetSchema.methods.dumpAttrs": "module:AssetModel~AssetSchema.methods.dumpAttrs",
                "AssetSchema.methods.delete": "module:AssetModel~AssetSchema.methods.delete",
                "AssetSchema.methods.createRevisionHistory": "module:AssetModel~AssetSchema.methods.createRevisionHistory",
                "AssetSchema.methods.history": "module:AssetModel~AssetSchema.methods.history",
                "AssetSchema.methods.getRevision": "module:AssetModel~AssetSchema.methods.getRevision",
                "AssetSchema.methods.lock": "module:AssetModel~AssetSchema.methods.lock",
                "AssetSchema.methods.unlock": "module:AssetModel~AssetSchema.methods.unlock",
                "AssetSchema.methods.revisions": "module:AssetModel~AssetSchema.methods.revisions",
                "AssetSchema.methods.lastRevision": "module:AssetModel~AssetSchema.methods.lastRevision",
                "AssetSchema.methods.attr": "module:AssetModel~AssetSchema.methods.attr",
                "AssetSchema.methods.remove_LEGACY": "module:AssetModel~AssetSchema.methods.remove_LEGACY",
                "AssetSchema.statics.create": "module:AssetModel~AssetSchema.statics.create",
                "AssetSchema.statics.findByIdentifier": "module:AssetModel~AssetSchema.statics.findByIdentifier",
                "AssetSchema.statics.isAttrValueUnique": "module:AssetModel~AssetSchema.statics.isAttrValueUnique",
                "AssetSchema.statics.getAssets": "module:AssetModel~AssetSchema.statics.getAssets",
                "AssetSchema.statics.getPartitionsAssets": "module:AssetModel~AssetSchema.statics.getPartitionsAssets",
                "AssetSchema.statics.setIdentifiers": "module:AssetModel~AssetSchema.statics.setIdentifiers",
                "AssetSchema.statics.get": "module:AssetModel~AssetSchema.statics.get",
                "AssetSchema.statics.getAsset": "module:AssetModel~AssetSchema.statics.getAsset",
                "AssetSchema.statics.getMany": "module:AssetModel~AssetSchema.statics.getMany",
                "AssetSchema.statics.findOnea": "module:AssetModel~AssetSchema.statics.findOnea",
                "AssetSchema.statics.delete": "module:AssetModel~AssetSchema.statics.delete"
            }
        },
        "undocumented": true,
        "name": "module:AssetModel",
        "longname": "module:AssetModel",
        "kind": "function"
    },
    {
        "comment": "/** \n     * Reference to the Mongoose Schema object\n     *\n     * @name Schema\n     * @member  {Mongoose.Schema}\n     * @see {@link http://mongoosejs.com/docs/guide.html|Mongoose Schema}\n     * @constant\n     * @readonly\n     */",
        "meta": {
            "range": [
                1959,
                2187
            ],
            "filename": "Asset.js",
            "lineno": 44,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Reference to the Mongoose Schema object",
        "name": "Schema",
        "kind": "constant",
        "type": {
            "names": [
                "Mongoose.Schema"
            ]
        },
        "see": [
            "{@link http://mongoosejs.com/docs/guide.html|Mongoose Schema}"
        ],
        "readonly": true,
        "longname": "module:AssetModel~Schema",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2198,
                2222
            ],
            "filename": "Asset.js",
            "lineno": 53,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000119",
                "name": "Schema",
                "type": "MemberExpression",
                "value": "Mongoose.Schema"
            }
        },
        "undocumented": true,
        "name": "Schema",
        "longname": "module:AssetModel~Schema",
        "kind": "constant",
        "memberof": "module:AssetModel",
        "scope": "inner"
    },
    {
        "comment": "/** \n     * Reference to the Mongoose Types object\n     *\n     * @name Types\n     * @member  {Mongoose.Types}\n     * @see {@link http://mongoosejs.com/docs/schematypes.html|Mongoose Schema Types}\n     * @constant\n     * @readonly\n     */",
        "meta": {
            "range": [
                2228,
                2465
            ],
            "filename": "Asset.js",
            "lineno": 55,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Reference to the Mongoose Types object",
        "name": "Types",
        "kind": "constant",
        "type": {
            "names": [
                "Mongoose.Types"
            ]
        },
        "see": [
            "{@link http://mongoosejs.com/docs/schematypes.html|Mongoose Schema Types}"
        ],
        "readonly": true,
        "longname": "module:AssetModel~Types",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2476,
                2499
            ],
            "filename": "Asset.js",
            "lineno": 64,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000125",
                "name": "Types",
                "type": "MemberExpression",
                "value": "Mongoose.Types"
            }
        },
        "undocumented": true,
        "name": "Types",
        "longname": "module:AssetModel~Types",
        "kind": "constant",
        "memberof": "module:AssetModel",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * The ObjectId of a Mongoose document. \n     *\n     * @typedef {string} ObjectId\n     * @name module:AssetModel~ObjectId\n     * @see {@link http://mongoosejs.com/docs/api.html#schema-objectid-js|Mongoose ObjectId reference}\n     * @see {@link https://docs.mongodb.com/manual/reference/method/ObjectId/| MongoDB ObjectId reference}\n     * @example  Mongooses ObjectId type is an (lowercase)alpha/numeric string 24 character in length, \n     * for example: 507f191e810c19729de860ea\n     */",
        "meta": {
            "range": [
                2505,
                3001
            ],
            "filename": "Asset.js",
            "lineno": 66,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "The ObjectId of a Mongoose document.",
        "kind": "typedef",
        "name": "ObjectId",
        "type": {
            "names": [
                "string"
            ]
        },
        "see": [
            "{@link http://mongoosejs.com/docs/api.html#schema-objectid-js|Mongoose ObjectId reference}",
            "{@link https://docs.mongodb.com/manual/reference/method/ObjectId/| MongoDB ObjectId reference}"
        ],
        "examples": [
            "Mongooses ObjectId type is an (lowercase)alpha/numeric string 24 character in length, \nfor example: 507f191e810c19729de860ea"
        ],
        "memberof": "module:AssetModel",
        "longname": "module:AssetModel~ObjectId",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * Asset Mongoose Schema\n     *\n     * @property    {string}    status                  Status of asset. This can be 'locked' (meaning locked, but \n     *                                                  unsecured with no password), 'unlocked' (meaning anyone with \n     *                                                  access can do anything), or a 108 character password, which\n     *                                                  means the asset is 'secured'\n     * @property    {ObjectId}  _createdBy              Reference to a document in the Account collection of the user \n     *                                                  who created the asset\n     * @property    {ObjectId}  _updatedBy              Reference to a document in the Account collection of whoever \n     *                                                  updated the asset last\n     * @property    {Schema}    attrCache               This is a sub-schema with no format or property restrictions, it \n     *                                                  holds a cached version of the assets attribute values (updated \n     *                                                  via Asset/AttrCache middleware plugin, which updates it via the \n     *                                                  documents 'save' event) \n     * @property    {array}     attributes              Array of documents containing the assets attributes and values\n     * @property    {ObjectId}  attributes[]._field     Reference to the attributes field document\n     * @property    {*}         attributes[].value      Value of the attribute\n     * @property    {ObjectId}  _partition              Reference document to the parent partition (Assets are associated \n     *                                                  to the partitions, not the other way around)\n     */",
        "meta": {
            "range": [
                4859,
                6720
            ],
            "filename": "Asset.js",
            "lineno": 98,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000131",
                "name": "AssetSchema",
                "type": "NewExpression",
                "value": ""
            }
        },
        "description": "Asset Mongoose Schema",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Status of asset. This can be 'locked' (meaning locked, but \n                                                 unsecured with no password), 'unlocked' (meaning anyone with \n                                                 access can do anything), or a 108 character password, which\n                                                 means the asset is 'secured'",
                "name": "status"
            },
            {
                "type": {
                    "names": [
                        "ObjectId"
                    ]
                },
                "description": "Reference to a document in the Account collection of the user \n                                                 who created the asset",
                "name": "_createdBy"
            },
            {
                "type": {
                    "names": [
                        "ObjectId"
                    ]
                },
                "description": "Reference to a document in the Account collection of whoever \n                                                 updated the asset last",
                "name": "_updatedBy"
            },
            {
                "type": {
                    "names": [
                        "Schema"
                    ]
                },
                "description": "This is a sub-schema with no format or property restrictions, it \n                                                 holds a cached version of the assets attribute values (updated \n                                                 via Asset/AttrCache middleware plugin, which updates it via the \n                                                 documents 'save' event)",
                "name": "attrCache"
            },
            {
                "type": {
                    "names": [
                        "array"
                    ]
                },
                "description": "Array of documents containing the assets attributes and values",
                "name": "attributes"
            },
            {
                "type": {
                    "names": [
                        "ObjectId"
                    ]
                },
                "description": "Reference to the attributes field document",
                "name": "attributes[]._field"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "Value of the attribute",
                "name": "attributes[].value"
            },
            {
                "type": {
                    "names": [
                        "ObjectId"
                    ]
                },
                "description": "Reference document to the parent partition (Assets are associated \n                                                 to the partitions, not the other way around)",
                "name": "_partition"
            }
        ],
        "name": "AssetSchema",
        "longname": "module:AssetModel~AssetSchema",
        "kind": "constant",
        "memberof": "module:AssetModel",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4894,
                5327
            ],
            "filename": "Asset.js",
            "lineno": 99,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000136",
                "name": "status",
                "type": "ObjectExpression",
                "value": "{\"type\":\"\",\"default\":\"unlocked\",\"select\":true,\"minlength\":6,\"maxlength\":108,\"validate\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "module:AssetModel~status",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4916,
                4941
            ],
            "filename": "Asset.js",
            "lineno": 100,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000138",
                "name": "type",
                "type": "MemberExpression",
                "value": "Schema.Types.String"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "module:AssetModel~status.type",
        "kind": "member",
        "memberof": "module:AssetModel~status",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4955,
                4974
            ],
            "filename": "Asset.js",
            "lineno": 101,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000144",
                "name": "default",
                "type": "Literal",
                "value": "unlocked"
            }
        },
        "undocumented": true,
        "name": "default",
        "longname": "module:AssetModel~status.default",
        "kind": "member",
        "memberof": "module:AssetModel~status",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4988,
                5000
            ],
            "filename": "Asset.js",
            "lineno": 102,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000146",
                "name": "select",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "select",
        "longname": "module:AssetModel~status.select",
        "kind": "member",
        "memberof": "module:AssetModel~status",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5014,
                5026
            ],
            "filename": "Asset.js",
            "lineno": 103,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000148",
                "name": "minlength",
                "type": "Literal",
                "value": 6
            }
        },
        "undocumented": true,
        "name": "minlength",
        "longname": "module:AssetModel~status.minlength",
        "kind": "member",
        "memberof": "module:AssetModel~status",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5064,
                5078
            ],
            "filename": "Asset.js",
            "lineno": 104,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000150",
                "name": "maxlength",
                "type": "Literal",
                "value": 108
            }
        },
        "undocumented": true,
        "name": "maxlength",
        "longname": "module:AssetModel~status.maxlength",
        "kind": "member",
        "memberof": "module:AssetModel~status",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5226,
                5317
            ],
            "filename": "Asset.js",
            "lineno": 106,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000152",
                "name": "validate",
                "type": "ArrowFunctionExpression"
            }
        },
        "undocumented": true,
        "name": "validate",
        "longname": "module:AssetModel~status.validate",
        "kind": "function",
        "memberof": "module:AssetModel~status",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5337,
                5458
            ],
            "filename": "Asset.js",
            "lineno": 108,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000169",
                "name": "_createdBy",
                "type": "ObjectExpression",
                "value": "{\"type\":\"\",\"ref\":\"Account\"}"
            }
        },
        "undocumented": true,
        "name": "_createdBy",
        "longname": "module:AssetModel~_createdBy",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5393,
                5420
            ],
            "filename": "Asset.js",
            "lineno": 110,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000171",
                "name": "type",
                "type": "MemberExpression",
                "value": "Schema.Types.ObjectId"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "module:AssetModel~_createdBy.type",
        "kind": "member",
        "memberof": "module:AssetModel~_createdBy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5434,
                5448
            ],
            "filename": "Asset.js",
            "lineno": 111,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000177",
                "name": "ref",
                "type": "Literal",
                "value": "Account"
            }
        },
        "undocumented": true,
        "name": "ref",
        "longname": "module:AssetModel~_createdBy.ref",
        "kind": "member",
        "memberof": "module:AssetModel~_createdBy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5468,
                5559
            ],
            "filename": "Asset.js",
            "lineno": 113,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000179",
                "name": "_updatedBy",
                "type": "ObjectExpression",
                "value": "{\"type\":\"\",\"ref\":\"Account\"}"
            }
        },
        "undocumented": true,
        "name": "_updatedBy",
        "longname": "module:AssetModel~_updatedBy",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5494,
                5521
            ],
            "filename": "Asset.js",
            "lineno": 114,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000181",
                "name": "type",
                "type": "MemberExpression",
                "value": "Schema.Types.ObjectId"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "module:AssetModel~_updatedBy.type",
        "kind": "member",
        "memberof": "module:AssetModel~_updatedBy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5535,
                5549
            ],
            "filename": "Asset.js",
            "lineno": 115,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000187",
                "name": "ref",
                "type": "Literal",
                "value": "Account"
            }
        },
        "undocumented": true,
        "name": "ref",
        "longname": "module:AssetModel~_updatedBy.ref",
        "kind": "member",
        "memberof": "module:AssetModel~_updatedBy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5569,
                5612
            ],
            "filename": "Asset.js",
            "lineno": 117,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000189",
                "name": "attrCache",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "attrCache",
        "longname": "module:AssetModel~attrCache",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5596,
                5609
            ],
            "filename": "Asset.js",
            "lineno": 117,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000194",
                "name": "strict",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "strict",
        "longname": "module:AssetModel~strict",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5622,
                6141
            ],
            "filename": "Asset.js",
            "lineno": 118,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000196",
                "name": "attributes",
                "type": "ArrayExpression",
                "value": "[\"{\\\"_field\\\":\\\"\\\",\\\"value\\\":\\\"\\\",\\\"immutable\\\":\\\"\\\"}\"]"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "module:AssetModel~attributes",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5649,
                5778
            ],
            "filename": "Asset.js",
            "lineno": 119,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000199",
                "name": "_field",
                "type": "ObjectExpression",
                "value": "{\"type\":\"\",\"ref\":\"Field\",\"required\":true}"
            }
        },
        "undocumented": true,
        "name": "_field",
        "longname": "module:AssetModel~_field",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5675,
                5702
            ],
            "filename": "Asset.js",
            "lineno": 120,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000201",
                "name": "type",
                "type": "MemberExpression",
                "value": "Schema.Types.ObjectId"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "module:AssetModel~_field.type",
        "kind": "member",
        "memberof": "module:AssetModel~_field",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5720,
                5732
            ],
            "filename": "Asset.js",
            "lineno": 121,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000207",
                "name": "ref",
                "type": "Literal",
                "value": "Field"
            }
        },
        "undocumented": true,
        "name": "ref",
        "longname": "module:AssetModel~_field.ref",
        "kind": "member",
        "memberof": "module:AssetModel~_field",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5750,
                5764
            ],
            "filename": "Asset.js",
            "lineno": 122,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000209",
                "name": "required",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "required",
        "longname": "module:AssetModel~_field.required",
        "kind": "member",
        "memberof": "module:AssetModel~_field",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5792,
                5887
            ],
            "filename": "Asset.js",
            "lineno": 124,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000211",
                "name": "value",
                "type": "ObjectExpression",
                "value": "{\"type\":\"\",\"required\":true}"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "module:AssetModel~value",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5817,
                5841
            ],
            "filename": "Asset.js",
            "lineno": 125,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000213",
                "name": "type",
                "type": "MemberExpression",
                "value": "Schema.Types.Mixed"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "module:AssetModel~value.type",
        "kind": "member",
        "memberof": "module:AssetModel~value",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5859,
                5873
            ],
            "filename": "Asset.js",
            "lineno": 126,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000219",
                "name": "required",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "required",
        "longname": "module:AssetModel~value.required",
        "kind": "member",
        "memberof": "module:AssetModel~value",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5996,
                6130
            ],
            "filename": "Asset.js",
            "lineno": 129,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000221",
                "name": "immutable",
                "type": "ObjectExpression",
                "value": "{\"type\":\"\",\"required\":false,\"default\":false}"
            }
        },
        "undocumented": true,
        "name": "immutable",
        "longname": "module:AssetModel~immutable",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6025,
                6051
            ],
            "filename": "Asset.js",
            "lineno": 130,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000223",
                "name": "type",
                "type": "MemberExpression",
                "value": "Schema.Types.Boolean"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "module:AssetModel~immutable.type",
        "kind": "member",
        "memberof": "module:AssetModel~immutable",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6069,
                6084
            ],
            "filename": "Asset.js",
            "lineno": 131,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000229",
                "name": "required",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "required",
        "longname": "module:AssetModel~immutable.required",
        "kind": "member",
        "memberof": "module:AssetModel~immutable",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6102,
                6116
            ],
            "filename": "Asset.js",
            "lineno": 132,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000231",
                "name": "default",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "default",
        "longname": "module:AssetModel~immutable.default",
        "kind": "member",
        "memberof": "module:AssetModel~immutable",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6151,
                6272
            ],
            "filename": "Asset.js",
            "lineno": 135,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000233",
                "name": "_partition",
                "type": "ObjectExpression",
                "value": "{\"type\":\"\",\"ref\":\"Partition\",\"required\":true}"
            }
        },
        "undocumented": true,
        "name": "_partition",
        "longname": "module:AssetModel~_partition",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6177,
                6204
            ],
            "filename": "Asset.js",
            "lineno": 136,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000235",
                "name": "type",
                "type": "MemberExpression",
                "value": "Schema.Types.ObjectId"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "module:AssetModel~_partition.type",
        "kind": "member",
        "memberof": "module:AssetModel~_partition",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6218,
                6234
            ],
            "filename": "Asset.js",
            "lineno": 137,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000241",
                "name": "ref",
                "type": "Literal",
                "value": "Partition"
            }
        },
        "undocumented": true,
        "name": "ref",
        "longname": "module:AssetModel~_partition.ref",
        "kind": "member",
        "memberof": "module:AssetModel~_partition",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6248,
                6262
            ],
            "filename": "Asset.js",
            "lineno": 138,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000243",
                "name": "required",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "required",
        "longname": "module:AssetModel~_partition.required",
        "kind": "member",
        "memberof": "module:AssetModel~_partition",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6353,
                6471
            ],
            "filename": "Asset.js",
            "lineno": 141,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000245",
                "name": "immutable",
                "type": "ObjectExpression",
                "value": "{\"type\":\"\",\"required\":false,\"default\":false}"
            }
        },
        "undocumented": true,
        "name": "immutable",
        "longname": "module:AssetModel~immutable",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6378,
                6404
            ],
            "filename": "Asset.js",
            "lineno": 142,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000247",
                "name": "type",
                "type": "MemberExpression",
                "value": "Schema.Types.Boolean"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "module:AssetModel~immutable.type",
        "kind": "member",
        "memberof": "module:AssetModel~immutable",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6418,
                6433
            ],
            "filename": "Asset.js",
            "lineno": 143,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000253",
                "name": "required",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "required",
        "longname": "module:AssetModel~immutable.required",
        "kind": "member",
        "memberof": "module:AssetModel~immutable",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6447,
                6461
            ],
            "filename": "Asset.js",
            "lineno": 144,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000255",
                "name": "default",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "default",
        "longname": "module:AssetModel~immutable.default",
        "kind": "member",
        "memberof": "module:AssetModel~immutable",
        "scope": "static"
    },
    {
        "comment": "/**\n         * @type Date\n         * @see http://mongoosejs.com/docs/guide.html#timestamps\n         * @ignore\n         */",
        "meta": {
            "range": [
                6619,
                6713
            ],
            "filename": "Asset.js",
            "lineno": 152,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000258",
                "name": "timestamps",
                "type": "ObjectExpression",
                "value": "{\"createdAt\":\"createdAt\",\"updatedAt\":\"updatedAt\"}"
            }
        },
        "type": {
            "names": [
                "Date"
            ]
        },
        "see": [
            "http://mongoosejs.com/docs/guide.html#timestamps"
        ],
        "ignore": true,
        "name": "timestamps",
        "longname": "module:AssetModel~timestamps",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6645,
                6667
            ],
            "filename": "Asset.js",
            "lineno": 153,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000260",
                "name": "createdAt",
                "type": "Literal",
                "value": "createdAt"
            }
        },
        "undocumented": true,
        "name": "createdAt",
        "longname": "module:AssetModel~timestamps.createdAt",
        "kind": "member",
        "memberof": "module:AssetModel~timestamps",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6681,
                6703
            ],
            "filename": "Asset.js",
            "lineno": 154,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000262",
                "name": "updatedAt",
                "type": "Literal",
                "value": "updatedAt"
            }
        },
        "undocumented": true,
        "name": "updatedAt",
        "longname": "module:AssetModel~timestamps.updatedAt",
        "kind": "member",
        "memberof": "module:AssetModel~timestamps",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7001,
                7035
            ],
            "filename": "Asset.js",
            "lineno": 163,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000273",
                "name": "General",
                "type": "Literal",
                "value": "DocVersionIncrement"
            }
        },
        "undocumented": true,
        "name": "General",
        "longname": "module:AssetModel~General",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7137,
                7161
            ],
            "filename": "Asset.js",
            "lineno": 165,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000275",
                "name": "Account",
                "type": "Literal",
                "value": "UpdatedBy"
            }
        },
        "undocumented": true,
        "name": "Account",
        "longname": "module:AssetModel~Account",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7583,
                7623
            ],
            "filename": "Asset.js",
            "lineno": 172,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000277",
                "name": "nocategory",
                "type": "Literal",
                "value": "mongoose-unique-validator"
            }
        },
        "undocumented": true,
        "name": "nocategory",
        "longname": "module:AssetModel~nocategory",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7953,
                7971
            ],
            "filename": "Asset.js",
            "lineno": 181,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000311",
                "name": "path",
                "type": "Literal",
                "value": "_partition"
            }
        },
        "undocumented": true,
        "name": "path",
        "longname": "module:AssetModel~path",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "/**\n     * Retrieve the primary value of an asset. The main goal of this is to quickly be able to reference\n     * assets by their primary value, if one is set. This defaults back to the assets _id string\n     *\n     * NOTE: For the identifier virtual property to work properly, the _partition and _partition._fields\n     *       both need to be populated, otherwise, the assets ID will be returned\n     *\n     * @this    module:AssetModel\n     * @instance\n     * @readonly\n     * @name    module:AssetModel#identifier\n     * @memberof module:AssetModel\n     * @returns {string}    Whatever the value of the primary field is for this asset, or if there isn't a\n     *                      primary field, or it isn't populated, return the assetID\n     *\n     * @example // In partition without a primary field, the identifier defaults to the documents ObjectID\n     *  AssetModel.create( partitionId, ( error, assetDoc ) => {\n     *      if( error ) \n     *          return console.error( `Error: ${error}` )\n     *\n     *      console.log( `The asset ${assetDoc.identifier} was created successfully` ) \n     *      // => The asset 56d0819b655baf4a4a7f9cad was created successfully\n     *  })\n     * \n     * @example // In a partition with a primary field, the primaryField value is the identifier\n     *  AssetModel.create( partitionId, {\n     *      primaryAttribute: 'asset-123'\n     *  }, ( error, assetDoc ) => {\n     *      if( error ) \n     *          return console.error( `Error: ${error}` )\n     *\n     *      console.log( `The asset ${assetDoc.identifier} was created successfully` ) \n     *      // => The asset asset-123 was created successfully\n     *  })\n     */",
        "meta": {
            "range": [
                8076,
                9752
            ],
            "filename": "Asset.js",
            "lineno": 187,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Retrieve the primary value of an asset. The main goal of this is to quickly be able to reference\nassets by their primary value, if one is set. This defaults back to the assets _id string\n\nNOTE: For the identifier virtual property to work properly, the _partition and _partition._fields\n      both need to be populated, otherwise, the assets ID will be returned",
        "this": "module:AssetModel",
        "scope": "instance",
        "readonly": true,
        "name": "identifier",
        "memberof": "module:AssetModel",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Whatever the value of the primary field is for this asset, or if there isn't a\n                     primary field, or it isn't populated, return the assetID"
            }
        ],
        "examples": [
            "// In partition without a primary field, the identifier defaults to the documents ObjectID\n AssetModel.create( partitionId, ( error, assetDoc ) => {\n     if( error ) \n         return console.error( `Error: ${error}` )\n\n     console.log( `The asset ${assetDoc.identifier} was created successfully` ) \n     // => The asset 56d0819b655baf4a4a7f9cad was created successfully\n })",
            "// In a partition with a primary field, the primaryField value is the identifier\n AssetModel.create( partitionId, {\n     primaryAttribute: 'asset-123'\n }, ( error, assetDoc ) => {\n     if( error ) \n         return console.error( `Error: ${error}` )\n\n     console.log( `The asset ${assetDoc.identifier} was created successfully` ) \n     // => The asset asset-123 was created successfully\n })"
        ],
        "longname": "module:AssetModel#identifier",
        "kind": "member"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9905,
                9923
            ],
            "filename": "Asset.js",
            "lineno": 224,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000325",
                "name": "assetID",
                "type": "MemberExpression",
                "value": "this._id"
            }
        },
        "undocumented": true,
        "name": "assetID",
        "longname": "<anonymous>~assetID",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10222,
                10289
            ],
            "filename": "Asset.js",
            "lineno": 232,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000345",
                "name": "primaryField",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "primaryField",
        "longname": "<anonymous>~primaryField",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10272,
                10285
            ],
            "filename": "Asset.js",
            "lineno": 232,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000357",
                "name": "primary",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "primary",
        "longname": "module:AssetModel~primary",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10515,
                11005
            ],
            "filename": "Asset.js",
            "lineno": 239,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000368",
                "name": "primaryVal",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "primaryVal",
        "longname": "<anonymous>~primaryVal",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * Dump asset attributes (into the console output)\n     *\n     * \n     */",
        "meta": {
            "range": [
                11661,
                12081
            ],
            "filename": "Asset.js",
            "lineno": 270,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000437",
                "name": "AssetSchema.methods.dumpAttrs",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": []
            },
            "vars": {
                "attrData": "module:AssetModel~AssetSchema.methods.dumpAttrs~attrData",
                "": null
            }
        },
        "description": "Dump asset attributes (into the console output)",
        "name": "methods.dumpAttrs",
        "longname": "module:AssetModel~AssetSchema.methods.dumpAttrs",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11719,
                11732
            ],
            "filename": "Asset.js",
            "lineno": 271,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000446",
                "name": "attrData",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "attrData",
        "longname": "module:AssetModel~AssetSchema.methods.dumpAttrs~attrData",
        "kind": "member",
        "memberof": "module:AssetModel~AssetSchema.methods.dumpAttrs",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11841,
                11868
            ],
            "filename": "Asset.js",
            "lineno": 275,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000467",
                "name": "attribute",
                "type": "MemberExpression",
                "value": "attr._field.name"
            }
        },
        "undocumented": true,
        "name": "attribute",
        "longname": "module:AssetModel~attribute",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11886,
                11908
            ],
            "filename": "Asset.js",
            "lineno": 276,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000473",
                "name": "type",
                "type": "MemberExpression",
                "value": "attr._field.type"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "module:AssetModel~type",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11926,
                11999
            ],
            "filename": "Asset.js",
            "lineno": 277,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000479",
                "name": "value",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "module:AssetModel~value",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "/**\n     * Delete an asset - This is meant to be more complicated than just removing the document from the collection, as\n     * there should be certain other actions taken, and if it's a soft delete, just update the doc\n     *\n     * @function module:AssetModel#delete\n     * @name     module:AssetModel#delete\n     * @instance\n     * @param   {?(string|module:AssetModel~deleteInstCb)=}  commentOrCb    Any comment to add for the logs, such as why \n     *                                                                  the asset was deleted\n     * @param   {module:AssetModel~deleteInstCb=}            callback       Callback to fire when asset gets deleted \n     *                                                                  successfully (If undefined, then a Promise \n     *                                                                  will be returned from this method)\n     * @returns {Promise}   Returns a Bluebird promise, but only if the callback param is undefined\n     *\n     * @example // Query for an asset, then delete it (with a comment)\n     *  AssetModel.get( 'asset-123' )\n     *      .then( assetDoc => { return assetDoc.delete( `Deleting asset ${assetDoc.identifier} (duplicate)`) })\n     *      .then( data => console.log( 'Asset successfully deleted' ) )\n     *      .catch( error => console.error( `Error: ${error}` ) )\n     *\n     * @example // Query for an asset, then delete it (without a comment)\n     *  AssetModel.get( 'asset-123' )\n     *      .then( assetDoc => assetDoc.delete )\n     *      .then( data => console.log( 'Asset successfully deleted' ) )\n     *      .catch( error => console.error( `Error: ${error}` ) )\n     */",
        "meta": {
            "range": [
                12164,
                13832
            ],
            "filename": "Asset.js",
            "lineno": 286,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Delete an asset - This is meant to be more complicated than just removing the document from the collection, as\nthere should be certain other actions taken, and if it's a soft delete, just update the doc",
        "kind": "function",
        "name": "delete",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "module:AssetModel~deleteInstCb"
                    ]
                },
                "optional": true,
                "nullable": true,
                "description": "Any comment to add for the logs, such as why \n                                                                 the asset was deleted",
                "name": "commentOrCb"
            },
            {
                "type": {
                    "names": [
                        "module:AssetModel~deleteInstCb"
                    ]
                },
                "optional": true,
                "description": "Callback to fire when asset gets deleted \n                                                                 successfully (If undefined, then a Promise \n                                                                 will be returned from this method)",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "Returns a Bluebird promise, but only if the callback param is undefined"
            }
        ],
        "examples": [
            "// Query for an asset, then delete it (with a comment)\n AssetModel.get( 'asset-123' )\n     .then( assetDoc => { return assetDoc.delete( `Deleting asset ${assetDoc.identifier} (duplicate)`) })\n     .then( data => console.log( 'Asset successfully deleted' ) )\n     .catch( error => console.error( `Error: ${error}` ) )",
            "// Query for an asset, then delete it (without a comment)\n AssetModel.get( 'asset-123' )\n     .then( assetDoc => assetDoc.delete )\n     .then( data => console.log( 'Asset successfully deleted' ) )\n     .catch( error => console.error( `Error: ${error}` ) )"
        ],
        "memberof": "module:AssetModel",
        "longname": "module:AssetModel#delete"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13837,
                14034
            ],
            "filename": "Asset.js",
            "lineno": 312,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000507",
                "name": "AssetSchema.methods.delete",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "comment"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "methods.delete",
        "longname": "module:AssetModel~AssetSchema.methods.delete",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Callback executed when an asset document is created.\n     *\n     * @function\n     * @type function\n     * @name deleteInstCb\n     * @callback module:AssetModel~deleteInstCb\n     * @param   {?(string|Exception)}   error           Error that was thrown, or null for no error\n     * @param   {Object}                data            Uhm... not sure\n     * @param   {string}                data.fooBar     Baz quux\n     * @todo    Determine what the 'data' value for the callback should be\n     *\n     * @example // Query for an asset (providing callback function and no comment)\n     *  AssetModel.get( 'asset-123', ( error, assetDoc ) => {\n     *      if( error ) \n     *          return console.error( `Error: ${error}` )\n     *\n     *      console.log( `Asset ${assetDoc.identifier} status: ${assetDoc.status}` )\n     *      // => Asset asset-123 status: unlocked\n     *  })\n     */",
        "meta": {
            "range": [
                14040,
                14932
            ],
            "filename": "Asset.js",
            "lineno": 318,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Callback executed when an asset document is created.",
        "kind": "typedef",
        "type": {
            "names": [
                "function"
            ]
        },
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "name": "deleteInstCb",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "Exception"
                    ]
                },
                "nullable": true,
                "description": "Error that was thrown, or null for no error",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Uhm... not sure",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Baz quux",
                "name": "data.fooBar"
            }
        ],
        "todo": [
            "Determine what the 'data' value for the callback should be"
        ],
        "examples": [
            "// Query for an asset (providing callback function and no comment)\n AssetModel.get( 'asset-123', ( error, assetDoc ) => {\n     if( error ) \n         return console.error( `Error: ${error}` )\n\n     console.log( `Asset ${assetDoc.identifier} status: ${assetDoc.status}` )\n     // => Asset asset-123 status: unlocked\n })"
        ],
        "memberof": "module:AssetModel",
        "longname": "module:AssetModel~deleteInstCb",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * Create an entry in the Revisions collection with a copy of the assets current values\n     *\n     * @this        module:AssetModel\n     * @function    module:AssetModel#createRevisionHistory\n     * @name        module:AssetModel#createRevisionHistory\n     * @param       {module:AssetModel~createRevisionCb=}    callback    Callback to fire (Optional, or promise returned)\n     * @returns     {Promise}   Returns a Bluebird promise, but only if the callback param is undefined\n     */",
        "meta": {
            "range": [
                15015,
                15509
            ],
            "filename": "Asset.js",
            "lineno": 342,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Create an entry in the Revisions collection with a copy of the assets current values",
        "this": "module:AssetModel",
        "kind": "function",
        "name": "createRevisionHistory",
        "params": [
            {
                "type": {
                    "names": [
                        "module:AssetModel~createRevisionCb"
                    ]
                },
                "optional": true,
                "description": "Callback to fire (Optional, or promise returned)",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "Returns a Bluebird promise, but only if the callback param is undefined"
            }
        ],
        "memberof": "module:AssetModel",
        "longname": "module:AssetModel#createRevisionHistory",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15514,
                15666
            ],
            "filename": "Asset.js",
            "lineno": 351,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000543",
                "name": "AssetSchema.methods.createRevisionHistory",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "methods.createRevisionHistory",
        "longname": "module:AssetModel~AssetSchema.methods.createRevisionHistory",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Callback executed when the assets document revision history entry is created\n     *\n     * @function\n     * @type function\n     * @name createRevisionCb\n     * @callback module:AssetModel~createRevisionCb\n     * @param {?(string|Exception)}         error       Error that was thrown, or null for no error\n     * @param {Object}                      data        Document containing any \n     * @param {module:AssetModel~ObjectId}  data._id    ID of the new revision entry\n     */",
        "meta": {
            "range": [
                15672,
                16161
            ],
            "filename": "Asset.js",
            "lineno": 357,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Callback executed when the assets document revision history entry is created",
        "kind": "typedef",
        "type": {
            "names": [
                "function"
            ]
        },
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "name": "createRevisionCb",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "Exception"
                    ]
                },
                "nullable": true,
                "description": "Error that was thrown, or null for no error",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Document containing any",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "module:AssetModel~ObjectId"
                    ]
                },
                "description": "ID of the new revision entry",
                "name": "data._id"
            }
        ],
        "memberof": "module:AssetModel",
        "longname": "module:AssetModel~createRevisionCb",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * Retrieve an assets history\n     *\n     * @param   {string}    comment     Any comment to add for the logs, such as why the asset was deleted\n     */",
        "meta": {
            "range": [
                16408,
                16750
            ],
            "filename": "Asset.js",
            "lineno": 376,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000564",
                "name": "AssetSchema.methods.history",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "filterOrCallback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Retrieve an assets history",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Any comment to add for the logs, such as why the asset was deleted",
                "name": "comment"
            }
        ],
        "name": "methods.history",
        "longname": "module:AssetModel~AssetSchema.methods.history",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Get a specific revision number for the instances asset\n     *\n     * @param   {number}    revision    The assets revision number (NOT the revision ID)\n     * @param   {function}  callback    Callback to execute if needed\n     * @returns {Promise}   Promise, or callback executed if defined\n     */",
        "meta": {
            "range": [
                17146,
                17323
            ],
            "filename": "Asset.js",
            "lineno": 399,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000608",
                "name": "AssetSchema.methods.getRevision",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "revision",
                    "callback"
                ]
            }
        },
        "description": "Get a specific revision number for the instances asset",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The assets revision number (NOT the revision ID)",
                "name": "revision"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Callback to execute if needed",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "Promise, or callback executed if defined"
            }
        ],
        "name": "methods.getRevision",
        "longname": "module:AssetModel~AssetSchema.methods.getRevision",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17267,
                17284
            ],
            "filename": "Asset.js",
            "lineno": 400,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000628",
                "name": "assetId",
                "type": "MemberExpression",
                "value": "this._id"
            }
        },
        "undocumented": true,
        "name": "assetId",
        "longname": "module:AssetModel~assetId",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17286,
                17304
            ],
            "filename": "Asset.js",
            "lineno": 400,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000632",
                "name": "revision",
                "type": "Identifier",
                "value": "revision"
            }
        },
        "undocumented": true,
        "name": "revision",
        "longname": "module:AssetModel~revision",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "/**\n     * Lock an asset, or optionally change the assets locked password\n     *\n     * @param   {string|object|function}    pwdOrCb             Password to use to secure asset, if none, asset is\n     *                                                          locked with no password; Or callback to be executed\n     *                                                          (optional, which will lock password with no password)\n     * @param   {function}                  callback            Callback to execute, or Promise returned\n     * @var     {string}                    pwdOrCb.password    Password to use, if not set, then the asset will be\n     *                                                          locked with no password\n     * @var     {boolean}                   pwdOrCb.override    If an asset is already locked with a password, this will\n     *                                                          override the unlock step by just resetting the password\n     * @var     {string}                    pwdOrCb.current     Current password, used if the asset is currently secured,\n     *                                                          and were re-locking it with a different password.\n     *                                                          (Setting password.force to true will override this)\n     * @returns {Promise}   Promise returned (with new asset doc if resolved), or callback is executed if defined\n     */",
        "meta": {
            "range": [
                17406,
                18859
            ],
            "filename": "Asset.js",
            "lineno": 405,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Lock an asset, or optionally change the assets locked password",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "object",
                        "function"
                    ]
                },
                "description": "Password to use to secure asset, if none, asset is\n                                                         locked with no password; Or callback to be executed\n                                                         (optional, which will lock password with no password)",
                "name": "pwdOrCb"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Callback to execute, or Promise returned",
                "name": "callback"
            }
        ],
        "kind": "member",
        "name": "current",
        "type": {
            "names": [
                "string"
            ]
        },
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "Promise returned (with new asset doc if resolved), or callback is executed if defined"
            }
        ],
        "memberof": "pwdOrCb",
        "longname": "pwdOrCb.current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18864,
                22397
            ],
            "filename": "Asset.js",
            "lineno": 421,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000636",
                "name": "AssetSchema.methods.lock",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "pwdOrCb",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "methods.lock",
        "longname": "module:AssetModel~AssetSchema.methods.lock",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21027,
                21318
            ],
            "filename": "Asset.js",
            "lineno": 454,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000724",
                "name": "password",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "password",
        "longname": "<anonymous>~password",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21874,
                21987
            ],
            "filename": "Asset.js",
            "lineno": 472,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000776",
                "name": "this.status",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "module:AssetModel~AssetSchema.methods.lock#status",
        "kind": "member",
        "memberof": "module:AssetModel~AssetSchema.methods.lock",
        "scope": "instance"
    },
    {
        "comment": "/**\n     * Lock an asset, or optionally change the assets locked password\n     *\n     * @param   {string|object|function}    pwdOrCb             Password to use to unlock asset (if its secured); Or an\n     *                                                          object with the password and/or an override boolean; Or\n     *                                                          callback to be executed (optional, which will lock\n     *                                                          password with no password)\n     * @param   {function}                  callback            Callback to execute, or Promise returned\n     * @var     {string}                    pwdOrCb.password    Password to use, if not set, then the asset will be\n     *                                                          locked with no password\n     * @var     {boolean}                   pwdOrCb.override    If an asset is already locked with a password, this will\n     *                                                          override the unlock step by just resetting the password\n     * @returns {Promise}   Promise returned (with new asset doc if resolved), or callback is executed if defined\n     */",
        "meta": {
            "range": [
                22480,
                23678
            ],
            "filename": "Asset.js",
            "lineno": 490,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Lock an asset, or optionally change the assets locked password",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "object",
                        "function"
                    ]
                },
                "description": "Password to use to unlock asset (if its secured); Or an\n                                                         object with the password and/or an override boolean; Or\n                                                         callback to be executed (optional, which will lock\n                                                         password with no password)",
                "name": "pwdOrCb"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Callback to execute, or Promise returned",
                "name": "callback"
            }
        ],
        "kind": "member",
        "name": "override",
        "type": {
            "names": [
                "string"
            ]
        },
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "Promise returned (with new asset doc if resolved), or callback is executed if defined"
            }
        ],
        "memberof": "pwdOrCb",
        "longname": "pwdOrCb.override",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23683,
                27318
            ],
            "filename": "Asset.js",
            "lineno": 504,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000842",
                "name": "AssetSchema.methods.unlock",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "pwdOrCb",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "methods.unlock",
        "longname": "module:AssetModel~AssetSchema.methods.unlock",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26448,
                26739
            ],
            "filename": "Asset.js",
            "lineno": 548,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000957",
                "name": "password",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "password",
        "longname": "<anonymous>~password",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26883,
                26907
            ],
            "filename": "Asset.js",
            "lineno": 560,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100000993",
                "name": "this.status",
                "type": "Literal",
                "value": "unlocked",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "module:AssetModel~AssetSchema.methods.unlock#status",
        "kind": "member",
        "memberof": "module:AssetModel~AssetSchema.methods.unlock",
        "scope": "instance"
    },
    {
        "comment": "/**\n     * Find revisions for associated asset\n     *\n     * @param   {object}        options             Options for filters\n     * @param   {function}      callback            Callback to fire, (or promise returned)\n     * @var     {Date}          options.date        Grab revisions created on specific date\n     * @var     {Date}          options.before      Grab revisions created before date\n     * @var     {Date}          options.after       Grab revisions created after date\n     * @var     {object}        options.attributes  Attributes to filter for (Must be exact case)\n     * @var     {Date}          options.except      Grab revisions not created on date\n     * @var     {object}        options.where       Custom defined mongoose 'where' object content (merged with existing)\n     * @var     {number}        options.limit       How many revisions to return\n     * @var     {object|string} options.sort        Sort revisions by this\n     * @return  {Promise}   Promise returned, or callback executed\n     */",
        "meta": {
            "range": [
                27401,
                28421
            ],
            "filename": "Asset.js",
            "lineno": 577,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Find revisions for associated asset",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Options for filters",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Callback to fire, (or promise returned)",
                "name": "callback"
            }
        ],
        "kind": "member",
        "name": "sort",
        "type": {
            "names": [
                "Date"
            ]
        },
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "Promise returned, or callback executed"
            }
        ],
        "memberof": "options",
        "longname": "options.sort",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28426,
                31069
            ],
            "filename": "Asset.js",
            "lineno": 592,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001047",
                "name": "AssetSchema.methods.revisions",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "options",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "methods.revisions",
        "longname": "module:AssetModel~AssetSchema.methods.revisions",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28552,
                28580
            ],
            "filename": "Asset.js",
            "lineno": 594,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001067",
                "name": "where",
                "type": "ObjectExpression",
                "value": "{\"_asset\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "where",
        "longname": "<anonymous>~where",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28562,
                28578
            ],
            "filename": "Asset.js",
            "lineno": 594,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001070",
                "name": "_asset",
                "type": "MemberExpression",
                "value": "this._id"
            }
        },
        "undocumented": true,
        "name": "_asset",
        "longname": "<anonymous>~where._asset",
        "kind": "member",
        "memberof": "<anonymous>~where",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28823,
                28855
            ],
            "filename": "Asset.js",
            "lineno": 599,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001095",
                "name": "where[undefined]",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "val",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~where.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~where",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29126,
                29146
            ],
            "filename": "Asset.js",
            "lineno": 607,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001137",
                "name": "where.createdAt",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "createdAt",
        "longname": "<anonymous>~where.createdAt",
        "kind": "member",
        "memberof": "<anonymous>~where",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29264,
                29299
            ],
            "filename": "Asset.js",
            "lineno": 611,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001151",
                "name": "where.createdAt.$gt",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "options.after",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "createdAt.$gt",
        "longname": "<anonymous>~where.createdAt.$gt",
        "kind": "member",
        "memberof": "<anonymous>~where",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29419,
                29455
            ],
            "filename": "Asset.js",
            "lineno": 615,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001169",
                "name": "where.createdAt.$lt",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "options.before",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "createdAt.$lt",
        "longname": "<anonymous>~where.createdAt.$lt",
        "kind": "member",
        "memberof": "<anonymous>~where",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29671,
                29706
            ],
            "filename": "Asset.js",
            "lineno": 620,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001188",
                "name": "where.createdAt.$gte",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "options.date",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "createdAt.$gte",
        "longname": "<anonymous>~where.createdAt.$gte",
        "kind": "member",
        "memberof": "<anonymous>~where",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29727,
                29816
            ],
            "filename": "Asset.js",
            "lineno": 621,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001198",
                "name": "where.createdAt.$lte",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "createdAt.$lte",
        "longname": "<anonymous>~where.createdAt.$lte",
        "kind": "member",
        "memberof": "<anonymous>~where",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29958,
                29994
            ],
            "filename": "Asset.js",
            "lineno": 626,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001231",
                "name": "where.createdAt.$ne",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "options.except",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "createdAt.$ne",
        "longname": "<anonymous>~where.createdAt.$ne",
        "kind": "member",
        "memberof": "<anonymous>~where",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30138,
                30177
            ],
            "filename": "Asset.js",
            "lineno": 631,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001250",
                "name": "where",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "where",
        "longname": "module:AssetModel~where",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30197,
                30251
            ],
            "filename": "Asset.js",
            "lineno": 633,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001261",
                "name": "revisionQuery",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "revisionQuery",
        "longname": "<anonymous>~revisionQuery",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * Get the latest revision of an asset, that is NOT the current revision. This will search for all documents in the\n     * revision table with the _asset ID of this asset, then sort it by the revision, and exclude the current\n     * revision (__v value), then limit the responses to one document.\n     *\n     * @this        module:AssetModel\n     * @function    module:AssetModel#lastRevisionCb\n     * @name        module:AssetModel#lastRevision\n     * @param       {?module:AssetModel~lastRevisionCb}  callback    Callback to execute, or promise returned if undefined\n     * @returns     {Promise} \n     *\n     * @example // Retrieve an asset document, query for the latest revision, then restore it (as a promise)\n     *  AssetModel.getAsset( assetIdentifier )\n     *      .then( assetDoc => assetDoc.lastRevision )\n     *      .then( revisionDoc => revisionDoc.restore )\n     *      .then( data => console.log( `Revision ID ${data.revision._id} restored to Asset ${data.asset._id}` ) )\n     *      .catch( error => console.error( `Error: ${error}` ) )\n     */",
        "meta": {
            "range": [
                31152,
                32222
            ],
            "filename": "Asset.js",
            "lineno": 658,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Get the latest revision of an asset, that is NOT the current revision. This will search for all documents in the\nrevision table with the _asset ID of this asset, then sort it by the revision, and exclude the current\nrevision (__v value), then limit the responses to one document.",
        "this": "module:AssetModel",
        "kind": "function",
        "name": "lastRevision",
        "params": [
            {
                "type": {
                    "names": [
                        "module:AssetModel~lastRevisionCb"
                    ]
                },
                "nullable": true,
                "description": "Callback to execute, or promise returned if undefined",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "examples": [
            "// Retrieve an asset document, query for the latest revision, then restore it (as a promise)\n AssetModel.getAsset( assetIdentifier )\n     .then( assetDoc => assetDoc.lastRevision )\n     .then( revisionDoc => revisionDoc.restore )\n     .then( data => console.log( `Revision ID ${data.revision._id} restored to Asset ${data.asset._id}` ) )\n     .catch( error => console.error( `Error: ${error}` ) )"
        ],
        "memberof": "module:AssetModel",
        "longname": "module:AssetModel#lastRevision",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                32227,
                32946
            ],
            "filename": "Asset.js",
            "lineno": 676,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001360",
                "name": "AssetSchema.methods.lastRevision",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "methods.lastRevision",
        "longname": "module:AssetModel~AssetSchema.methods.lastRevision",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                32349,
                32384
            ],
            "filename": "Asset.js",
            "lineno": 678,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001379",
                "name": "Revision",
                "type": "MemberExpression",
                "value": "Mongoose.models.Revision"
            }
        },
        "undocumented": true,
        "name": "Revision",
        "longname": "<anonymous>~Revision",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                32434,
                32450
            ],
            "filename": "Asset.js",
            "lineno": 681,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001400",
                "name": "_asset",
                "type": "MemberExpression",
                "value": "this._id"
            }
        },
        "undocumented": true,
        "name": "_asset",
        "longname": "module:AssetModel~_asset",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                32543,
                32570
            ],
            "filename": "Asset.js",
            "lineno": 683,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001404",
                "name": "revision",
                "type": "ObjectExpression",
                "value": "{\"$ne\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "revision",
        "longname": "module:AssetModel~revision",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                32555,
                32568
            ],
            "filename": "Asset.js",
            "lineno": 683,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001406",
                "name": "$ne",
                "type": "MemberExpression",
                "value": "this.__v"
            }
        },
        "undocumented": true,
        "name": "$ne",
        "longname": "module:AssetModel~revision.$ne",
        "kind": "member",
        "memberof": "module:AssetModel~revision",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                32612,
                32628
            ],
            "filename": "Asset.js",
            "lineno": 685,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001412",
                "name": "revision",
                "type": "Literal",
                "value": "desc"
            }
        },
        "undocumented": true,
        "name": "revision",
        "longname": "module:AssetModel~revision",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "/**\n     * Callback executed when an assets latest revision is queried\n     *\n     * @function\n     * @type function\n     * @name lastRevisionCb\n     * @callback module:AssetModel~lastRevisionCb\n     * @param {?(string|Exception)}         error               Error that was thrown, or null for no error\n     * @param {?Object}                     revisionDoc         Document containing the last revision, or Null if none found\n     * @param {module:AssetModel~ObjectId}  revisionDoc._id     ID of the revision document\n     *\n     * @example // Query for an asset, then query for the assets latest revision, and output the ObjectId\n     *  AssetModel.getAsset( 'asset-1234', ( assetError, assetDoc ) => {\n     *      if( assetError )\n     *          return console.error( `Error: ${assetError}` )\n     *\n     *      assetDoc.lastRevision( ( revisionError, revisionDoc ) => {\n     *          if( revisionError )\n     *              return console.error( `Error: ${revisionError}` )\n     *\n     *          if( ! revisionDoc )\n     *              return console.log( `No previous revisions found for Asset ${assetDoc.identifier}` )\n     *\n     *          console.log( `The last revision ID for Asset ${assetDoc.identifier} is ${revisionDoc._id}` )\n     *          // => The last revision ID for Asset asset-1234 is 46d0h19d655caf4a4a7f9xaa\n     *      })\n     *  })\n     */",
        "meta": {
            "range": [
                32952,
                34323
            ],
            "filename": "Asset.js",
            "lineno": 696,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Callback executed when an assets latest revision is queried",
        "kind": "typedef",
        "type": {
            "names": [
                "function"
            ]
        },
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "name": "lastRevisionCb",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "Exception"
                    ]
                },
                "nullable": true,
                "description": "Error that was thrown, or null for no error",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "Document containing the last revision, or Null if none found",
                "name": "revisionDoc"
            },
            {
                "type": {
                    "names": [
                        "module:AssetModel~ObjectId"
                    ]
                },
                "description": "ID of the revision document",
                "name": "revisionDoc._id"
            }
        ],
        "examples": [
            "// Query for an asset, then query for the assets latest revision, and output the ObjectId\n AssetModel.getAsset( 'asset-1234', ( assetError, assetDoc ) => {\n     if( assetError )\n         return console.error( `Error: ${assetError}` )\n\n     assetDoc.lastRevision( ( revisionError, revisionDoc ) => {\n         if( revisionError )\n             return console.error( `Error: ${revisionError}` )\n\n         if( ! revisionDoc )\n             return console.log( `No previous revisions found for Asset ${assetDoc.identifier}` )\n\n         console.log( `The last revision ID for Asset ${assetDoc.identifier} is ${revisionDoc._id}` )\n         // => The last revision ID for Asset asset-1234 is 46d0h19d655caf4a4a7f9xaa\n     })\n })"
        ],
        "memberof": "module:AssetModel",
        "longname": "module:AssetModel~lastRevisionCb",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * Manage a specific attribute of a specific asset. The top attr instance method returns an object with three\n     * functions that can be used to retrieve (attr.value) the attribute, update (attr.set) the attributes value, and\n     * delete (attr.delete) the attribute.\n     *\n     * @param   {string}    name    Attributes name or the attributes ID (ObjectId)\n     * @returns {object}    Object with 3 other functions\n     * @note    Any attribute modifications (delete/set) only change the attribute in memory, meaning the asset document\n     *          will still need to be saved via Doc.save() for the changes to take effect\n     * @note    If there is somehow more than one attribute found with the name specified (which shouldn't happen unless\n     *          someone interacts with documents directly), then only the first asset will be retrieved\n     * @example const Hostname = assetDoc.attr('Hostname')\n     *          console.log(`Asset Hostname: ${Hostname.value()}`)\n     *          Hostname.set('something.whatever.tld')\n     *          Hostname.delete()\n     * @todo    This needs to execute AttrCache middleware\n     */",
        "meta": {
            "range": [
                35556,
                40664
            ],
            "filename": "Asset.js",
            "lineno": 744,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001449",
                "name": "AssetSchema.methods.attr",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "name"
                ]
            },
            "vars": {
                "thisAsset": "module:AssetModel~AssetSchema.methods.attr~thisAsset",
                "errPrefix": "module:AssetModel~AssetSchema.methods.attr~errPrefix",
                "attrIdx": "module:AssetModel~AssetSchema.methods.attr~attrIdx",
                "": null,
                "foundAttrsTotal": "module:AssetModel~AssetSchema.methods.attr~foundAttrsTotal"
            }
        },
        "description": "Manage a specific attribute of a specific asset. The top attr instance method returns an object with three\nfunctions that can be used to retrieve (attr.value) the attribute, update (attr.set) the attributes value, and\ndelete (attr.delete) the attribute.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Attributes name or the attributes ID (ObjectId)",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object with 3 other functions"
            }
        ],
        "tags": [
            {
                "originalTitle": "note",
                "title": "note",
                "text": "Any attribute modifications (delete/set) only change the attribute in memory, meaning the asset document\n         will still need to be saved via Doc.save() for the changes to take effect",
                "value": "Any attribute modifications (delete/set) only change the attribute in memory, meaning the asset document\n         will still need to be saved via Doc.save() for the changes to take effect"
            },
            {
                "originalTitle": "note",
                "title": "note",
                "text": "If there is somehow more than one attribute found with the name specified (which shouldn't happen unless\n         someone interacts with documents directly), then only the first asset will be retrieved",
                "value": "If there is somehow more than one attribute found with the name specified (which shouldn't happen unless\n         someone interacts with documents directly), then only the first asset will be retrieved"
            }
        ],
        "examples": [
            "const Hostname = assetDoc.attr('Hostname')\n         console.log(`Asset Hostname: ${Hostname.value()}`)\n         Hostname.set('something.whatever.tld')\n         Hostname.delete()"
        ],
        "todo": [
            "This needs to execute AttrCache middleware"
        ],
        "name": "methods.attr",
        "longname": "module:AssetModel~AssetSchema.methods.attr",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35774,
                35790
            ],
            "filename": "Asset.js",
            "lineno": 749,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001467",
                "name": "thisAsset",
                "type": "ThisExpression",
                "value": "this"
            }
        },
        "undocumented": true,
        "name": "thisAsset",
        "longname": "module:AssetModel~AssetSchema.methods.attr~thisAsset",
        "kind": "constant",
        "memberof": "module:AssetModel~AssetSchema.methods.attr",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35853,
                35944
            ],
            "filename": "Asset.js",
            "lineno": 752,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001471",
                "name": "errPrefix",
                "type": "TemplateLiteral",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "errPrefix",
        "longname": "module:AssetModel~AssetSchema.methods.attr~errPrefix",
        "kind": "constant",
        "memberof": "module:AssetModel~AssetSchema.methods.attr",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                36576,
                36714
            ],
            "filename": "Asset.js",
            "lineno": 763,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001524",
                "name": "attrIdx",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "attrIdx",
        "longname": "module:AssetModel~AssetSchema.methods.attr~attrIdx",
        "kind": "member",
        "memberof": "module:AssetModel~AssetSchema.methods.attr",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                36847,
                37025
            ],
            "filename": "Asset.js",
            "lineno": 769,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001567",
                "name": "foundAttrsTotal",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "foundAttrsTotal",
        "longname": "module:AssetModel~AssetSchema.methods.attr~foundAttrsTotal",
        "kind": "constant",
        "memberof": "module:AssetModel~AssetSchema.methods.attr",
        "scope": "inner"
    },
    {
        "comment": "/**\n         * Attribute management functions. These are only accessible if the attribute itself has already been verified\n         * via the above code, if it wasn't then either an error will be thrown, or undefined will be returned if the\n         * attribute does not exist\n         *\n         * @var this.set    Set an attributes value (im memory, still needs to be saved via Doc.save())\n         * @var this.delete Delete the specified attribute from memory\n         * @var this.value  Retrieve the attributes value\n         */",
        "meta": {
            "range": [
                37634,
                38166
            ],
            "filename": "Asset.js",
            "lineno": 782,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Attribute management functions. These are only accessible if the attribute itself has already been verified\nvia the above code, if it wasn't then either an error will be thrown, or undefined will be returned if the\nattribute does not exist",
        "kind": "member",
        "name": "value",
        "memberof": "this",
        "longname": "this.value",
        "scope": "static"
    },
    {
        "comment": "/**\n             * Set the attributes value in memory\n             *\n             * @param   {Mixed} value   New value of attribute\n             * @returns {void}  Nothing to return..\n             */",
        "meta": {
            "range": [
                38408,
                38499
            ],
            "filename": "Asset.js",
            "lineno": 798,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001627",
                "name": "set",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "thisAsset.attributes[undefined].value": "module:AssetModel~AssetSchema.methods.attr~thisAsset.attributes[undefined].value"
            }
        },
        "description": "Set the attributes value in memory",
        "params": [
            {
                "type": {
                    "names": [
                        "Mixed"
                    ]
                },
                "description": "New value of attribute",
                "name": "value"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "void"
                    ]
                },
                "description": "Nothing to return.."
            }
        ],
        "name": "set",
        "longname": "module:AssetModel~set",
        "kind": "function",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                38440,
                38485
            ],
            "filename": "Asset.js",
            "lineno": 799,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001632",
                "name": "thisAsset.attributes[undefined].value",
                "type": "Identifier",
                "funcscope": "module:AssetModel~AssetSchema.methods.attr",
                "value": "value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "attributes[undefined].value",
        "longname": "module:AssetModel~AssetSchema.methods.attr~thisAsset.attributes[undefined].value",
        "kind": "member",
        "memberof": "module:AssetModel~AssetSchema.methods.attr~thisAsset",
        "scope": "static"
    },
    {
        "comment": "/**\n             * Delete the attribute from the asset (in memory)\n             *\n             * @returns {boolean|object}    If there was an error removing it for some reason, then `false` is returned;\n             *                              If the single attribute was deleted, return the attribute itself\n             */",
        "meta": {
            "range": [
                38854,
                40136
            ],
            "filename": "Asset.js",
            "lineno": 808,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001641",
                "name": "delete",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "removed": "module:AssetModel~delete~removed",
                "": null,
                "attrIdx": "module:AssetModel~attrIdx"
            }
        },
        "description": "Delete the attribute from the asset (in memory)",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean",
                        "object"
                    ]
                },
                "description": "If there was an error removing it for some reason, then `false` is returned;\n                             If the single attribute was deleted, return the attribute itself"
            }
        ],
        "name": "delete",
        "longname": "module:AssetModel~delete",
        "kind": "function",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                38999,
                39134
            ],
            "filename": "Asset.js",
            "lineno": 810,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001645",
                "name": "removed",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "removed",
        "longname": "module:AssetModel~delete~removed",
        "kind": "constant",
        "memberof": "module:AssetModel~delete",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39725,
                39863
            ],
            "filename": "Asset.js",
            "lineno": 821,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001709",
                "name": "attrIdx",
                "type": "CallExpression",
                "funcscope": "module:AssetModel~delete",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "attrIdx",
        "longname": "module:AssetModel~attrIdx",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "/**\n             * Retrieve attributes value\n             *\n             * @param   {boolean}   full    If true, then the entire attribute will be returned (should be populated)\n             * @returns {Mixed|object}  If not full, attr value returned (mixed); If full, full attr returned (object)\n             */",
        "meta": {
            "range": [
                40476,
                40648
            ],
            "filename": "Asset.js",
            "lineno": 837,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001755",
                "name": "value",
                "type": "ArrowFunctionExpression"
            }
        },
        "description": "Retrieve attributes value",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If true, then the entire attribute will be returned (should be populated)",
                "name": "full"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mixed",
                        "object"
                    ]
                },
                "description": "If not full, attr value returned (mixed); If full, full attr returned (object)"
            }
        ],
        "name": "value",
        "longname": "module:AssetModel~value",
        "kind": "function",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "/**\n     * Remove an attribute object from the assets attributes array using the attribute name or the field ID\n     *\n     * @param   {string}    name    Either the attribute name, or the field ID to delete\n     * @returns {boolean|array|object}  true    - It never existed to delete\n     *                                  false   - It wasn't successfully deleted\n     *                                  object  - Deleted one attribute (deleted attribute data returned)\n     *                                  array   - Deleted more than 1 attribute (deleted attributes data returned)\n     *                                            This shouldn't ever happen, since attributes should only exist once\n     *                                            per an asset, but via manual DB interaction or automation, mistakes\n     *                                            can happen\n     * @note    This just removes the attribute from the document in memory, the document still needs to be saved\n     * db.revisions.find({ _asset: ObjectId('56ba258a98f0767514d0ee0b'), revision: 32 }).pretty()\n     * @ignore\n     */",
        "meta": {
            "range": [
                41870,
                44323
            ],
            "filename": "Asset.js",
            "lineno": 862,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001775",
                "name": "AssetSchema.methods.remove_LEGACY",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "name"
                ]
            },
            "vars": {
                "errPrefix": "module:AssetModel~AssetSchema.methods.remove_LEGACY~errPrefix",
                "attrIdx": "module:AssetModel~attrIdx",
                "": null,
                "removed": "module:AssetModel~AssetSchema.methods.remove_LEGACY~removed"
            }
        },
        "description": "Remove an attribute object from the assets attributes array using the attribute name or the field ID",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Either the attribute name, or the field ID to delete",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean",
                        "array",
                        "object"
                    ]
                },
                "description": "true    - It never existed to delete\n                                 false   - It wasn't successfully deleted\n                                 object  - Deleted one attribute (deleted attribute data returned)\n                                 array   - Deleted more than 1 attribute (deleted attributes data returned)\n                                           This shouldn't ever happen, since attributes should only exist once\n                                           per an asset, but via manual DB interaction or automation, mistakes\n                                           can happen"
            }
        ],
        "tags": [
            {
                "originalTitle": "note",
                "title": "note",
                "text": "This just removes the attribute from the document in memory, the document still needs to be saved\ndb.revisions.find({ _asset: ObjectId('56ba258a98f0767514d0ee0b'), revision: 32 }).pretty()",
                "value": "This just removes the attribute from the document in memory, the document still needs to be saved\ndb.revisions.find({ _asset: ObjectId('56ba258a98f0767514d0ee0b'), revision: 32 }).pretty()"
            }
        ],
        "ignore": true,
        "name": "methods.remove_LEGACY",
        "longname": "module:AssetModel~AssetSchema.methods.remove_LEGACY",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                42104,
                42181
            ],
            "filename": "Asset.js",
            "lineno": 867,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001795",
                "name": "errPrefix",
                "type": "TemplateLiteral",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "errPrefix",
        "longname": "module:AssetModel~AssetSchema.methods.remove_LEGACY~errPrefix",
        "kind": "constant",
        "memberof": "module:AssetModel~AssetSchema.methods.remove_LEGACY",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                42743,
                42876
            ],
            "filename": "Asset.js",
            "lineno": 878,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001848",
                "name": "attrIdx",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "attrIdx",
        "longname": "module:AssetModel~AssetSchema.methods.remove_LEGACY~attrIdx",
        "kind": "member",
        "memberof": "module:AssetModel~AssetSchema.methods.remove_LEGACY",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                43109,
                43239
            ],
            "filename": "Asset.js",
            "lineno": 885,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001891",
                "name": "removed",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "removed",
        "longname": "module:AssetModel~AssetSchema.methods.remove_LEGACY~removed",
        "kind": "constant",
        "memberof": "module:AssetModel~AssetSchema.methods.remove_LEGACY",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                43761,
                43894
            ],
            "filename": "Asset.js",
            "lineno": 896,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100001955",
                "name": "attrIdx",
                "type": "CallExpression",
                "funcscope": "module:AssetModel~AssetSchema.methods.remove_LEGACY",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "attrIdx",
        "longname": "module:AssetModel~attrIdx",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "/**\n     * Create one or multiple assets, associating them to the specified partition. This is much easier than inserting \n     * a new asset document manually, since the `attributes` parameter here can be a simple object, (or an array of \n     * objects for multiple assets), and the static/dynamic attributes are extracted by grabbing the partition fields \n     * and parsing the object\n     *\n     * @function    module:AssetModel.create\n     * @memberof    module:AssetModel\n     * @this        module:AssetModel\n     * @name        module:AssetModel.create\n     * @param   {module:AssetModel~ObjectId}                    partitionId  The MDB ObjectId of the partition the assets \n     *                                                                       should be associated to\n     * @param   {?(array|object|module:AssetModel~createCb)=}   attrsOrCb    An object of the attribute values (static and \n     *                                                                       dynamic attrs), or an array of objects (for \n     *                                                                       multiple assets), or undefined for empty \n     *                                                                       attribute values.\n     * @param   {module:AssetModel~createCb=}                   callback     Callback to fire when the assets are successfully \n     *                                                                       or unsuccessfully created (If undefined, then a \n     *                                                                       Promise will be returned from this method)\n     * @returns {Promise}   Returns a Bluebird promise, unless a callback is specified\n     * @note    I HIGHLY recommend that the assets be created from the Partition instance methods, as they do most of\n     *          the validation, this should only be used after the asset attributes are already validated\n     * @todo    Validate the asset attributes against the partition field settings\n     * @todo    Validate the partition ID exists (by getting the data)\n     * @todo    Use above data to verify the primary attibute is populated\n     * \n     * @example // Create a single asset without any attribute values defined\n     *  AssetModel.create( PartitionsObjectId )\n     *      .then( assetDoc => {\n     *          console.log( `The asset ${assetDoc.identifier} was successfully created` ) \n     *          // => The asset 56a3e5c72b46691213a8f319 was successfully created\n     *      })\n     *      .catch( error => console.error( `Error: ${error}` ) )\n     *\n     * @example // Create a single asset in a partition with the primary field 'primaryAttr', using a callback\n     *  AssetModel.create( PartitionsObjectId, {\n     *      primaryAttr: 'asset-123', // Primary (string) attribute (Providing callback function)\n     *      booleanAttr: false,       // Boolean attribute\n     *      numericAttr: 123          // Numeric attribute\n     *  })\n     *      .then( assetDocs => {\n     *          console.log( `The asset ${assetDoc.identifier} was successfully created` ) \n     *          // => The asset asset-123 was successfully created\n     *      })\n     *      .catch( error => console.error( `Error: ${error}` ) )\n     * \n     * @example // Create two assets\n     *  AssetModel.create( PartitionsObjectId, [{\n     *      stringAttr: 'Asset #1', // String attribute\n     *      booleanAttr: false,     // Boolean attribute\n     *      numericAttr: 123        // Numeric attribute\n     *  },{\n     *      stringAttr: 'Asset #2', // String attribute\n     *      booleanAttr: true,      // Boolean attribute\n     *      numericAttr: 456        // Numeric attribute\n     *  }])\n     *      .then( assetDocs => {\n     *          console.log( `The assets ${_.size( assetDocs )} were successfully created` ) \n     *          // => The assets _____ were successfully created\n     *      })\n     *      .catch( error => console.error( `Error: ${error}` ) )\n     */",
        "meta": {
            "range": [
                44406,
                48396
            ],
            "filename": "Asset.js",
            "lineno": 911,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Create one or multiple assets, associating them to the specified partition. This is much easier than inserting \na new asset document manually, since the `attributes` parameter here can be a simple object, (or an array of \nobjects for multiple assets), and the static/dynamic attributes are extracted by grabbing the partition fields \nand parsing the object",
        "kind": "function",
        "name": "create",
        "memberof": "module:AssetModel",
        "this": "module:AssetModel",
        "params": [
            {
                "type": {
                    "names": [
                        "module:AssetModel~ObjectId"
                    ]
                },
                "description": "The MDB ObjectId of the partition the assets \n                                                                      should be associated to",
                "name": "partitionId"
            },
            {
                "type": {
                    "names": [
                        "array",
                        "object",
                        "module:AssetModel~createCb"
                    ]
                },
                "optional": true,
                "nullable": true,
                "description": "An object of the attribute values (static and \n                                                                      dynamic attrs), or an array of objects (for \n                                                                      multiple assets), or undefined for empty \n                                                                      attribute values.",
                "name": "attrsOrCb"
            },
            {
                "type": {
                    "names": [
                        "module:AssetModel~createCb"
                    ]
                },
                "optional": true,
                "description": "Callback to fire when the assets are successfully \n                                                                      or unsuccessfully created (If undefined, then a \n                                                                      Promise will be returned from this method)",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "Returns a Bluebird promise, unless a callback is specified"
            }
        ],
        "tags": [
            {
                "originalTitle": "note",
                "title": "note",
                "text": "I HIGHLY recommend that the assets be created from the Partition instance methods, as they do most of\n         the validation, this should only be used after the asset attributes are already validated",
                "value": "I HIGHLY recommend that the assets be created from the Partition instance methods, as they do most of\n         the validation, this should only be used after the asset attributes are already validated"
            }
        ],
        "todo": [
            "Validate the asset attributes against the partition field settings",
            "Validate the partition ID exists (by getting the data)",
            "Use above data to verify the primary attibute is populated"
        ],
        "examples": [
            "// Create a single asset without any attribute values defined\n AssetModel.create( PartitionsObjectId )\n     .then( assetDoc => {\n         console.log( `The asset ${assetDoc.identifier} was successfully created` ) \n         // => The asset 56a3e5c72b46691213a8f319 was successfully created\n     })\n     .catch( error => console.error( `Error: ${error}` ) )",
            "// Create a single asset in a partition with the primary field 'primaryAttr', using a callback\n AssetModel.create( PartitionsObjectId, {\n     primaryAttr: 'asset-123', // Primary (string) attribute (Providing callback function)\n     booleanAttr: false,       // Boolean attribute\n     numericAttr: 123          // Numeric attribute\n })\n     .then( assetDocs => {\n         console.log( `The asset ${assetDoc.identifier} was successfully created` ) \n         // => The asset asset-123 was successfully created\n     })\n     .catch( error => console.error( `Error: ${error}` ) )",
            "// Create two assets\n AssetModel.create( PartitionsObjectId, [{\n     stringAttr: 'Asset #1', // String attribute\n     booleanAttr: false,     // Boolean attribute\n     numericAttr: 123        // Numeric attribute\n },{\n     stringAttr: 'Asset #2', // String attribute\n     booleanAttr: true,      // Boolean attribute\n     numericAttr: 456        // Numeric attribute\n }])\n     .then( assetDocs => {\n         console.log( `The assets ${_.size( assetDocs )} were successfully created` ) \n         // => The assets _____ were successfully created\n     })\n     .catch( error => console.error( `Error: ${error}` ) )"
        ],
        "longname": "module:AssetModel.create",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                48401,
                55320
            ],
            "filename": "Asset.js",
            "lineno": 973,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002010",
                "name": "AssetSchema.statics.create",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "partitionId",
                    "attrsOrCb",
                    "callback"
                ]
            },
            "vars": {
                "_create": "module:AssetModel~AssetSchema.statics.create~_create",
                "": null
            }
        },
        "undocumented": true,
        "name": "statics.create",
        "longname": "module:AssetModel~AssetSchema.statics.create",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "/**\n         * Internal command to create the document for a new asset\n         *\n         * @param   {(module:AssetModel~ObjectId|string)}           _pId        Partition ID to add asset to\n         * @param   {?(Object|module:AssetModel~createStaticCb)=}   _attrsOrCb  Either the Assets attribute values (static \n         *                                                                      AND dynamic - The static and dynamic attributes \n         *                                                                      are separated, and the proper asset document \n         *                                                                      structure is constructed); Or a callback function\n         * @param   {module:AssetModel~createStaticCb=}               _cb  Callback to fire when asset gets created \n         *                                                                      successfully (If undefined, then a Promise \n         *                                                                      will be returned from this method)\n         */",
        "meta": {
            "range": [
                49566,
                52386
            ],
            "filename": "Asset.js",
            "lineno": 987,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002022",
                "name": "_create",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "description": "Internal command to create the document for a new asset",
        "params": [
            {
                "type": {
                    "names": [
                        "module:AssetModel~ObjectId",
                        "string"
                    ]
                },
                "description": "Partition ID to add asset to",
                "name": "_pId"
            },
            {
                "type": {
                    "names": [
                        "Object",
                        "module:AssetModel~createStaticCb"
                    ]
                },
                "optional": true,
                "nullable": true,
                "description": "Either the Assets attribute values (static \n                                                                     AND dynamic - The static and dynamic attributes \n                                                                     are separated, and the proper asset document \n                                                                     structure is constructed); Or a callback function",
                "name": "_attrsOrCb"
            },
            {
                "type": {
                    "names": [
                        "module:AssetModel~createStaticCb"
                    ]
                },
                "optional": true,
                "description": "Callback to fire when asset gets created \n                                                                     successfully (If undefined, then a Promise \n                                                                     will be returned from this method)",
                "name": "_cb"
            }
        ],
        "name": "_create",
        "longname": "module:AssetModel~AssetSchema.statics.create~_create",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema.statics.create",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                50204,
                50258
            ],
            "filename": "Asset.js",
            "lineno": 997,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002078",
                "name": "attrs",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "attrs",
        "longname": "<anonymous>~attrs",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                50376,
                50398
            ],
            "filename": "Asset.js",
            "lineno": 1000,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002089",
                "name": "statics",
                "type": "ArrayExpression",
                "value": "[\"status\"]"
            }
        },
        "undocumented": true,
        "name": "statics",
        "longname": "<anonymous>~statics",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                50535,
                50574
            ],
            "filename": "Asset.js",
            "lineno": 1003,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002094",
                "name": "statics",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "statics",
        "longname": "module:AssetModel~statics",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51108,
                51191
            ],
            "filename": "Asset.js",
            "lineno": 1011,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002126",
                "name": "attrValues",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "attrValues",
        "longname": "<anonymous>~attrValues",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51157,
                51178
            ],
            "filename": "Asset.js",
            "lineno": 1011,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002137",
                "name": "_field",
                "type": "MemberExpression",
                "value": "fields[undefined]"
            }
        },
        "undocumented": true,
        "name": "_field",
        "longname": "module:AssetModel~_field",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51180,
                51185
            ],
            "filename": "Asset.js",
            "lineno": 1011,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002141",
                "name": "value",
                "type": "Identifier",
                "value": "value"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "module:AssetModel~value",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51714,
                51730
            ],
            "filename": "Asset.js",
            "lineno": 1020,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002164",
                "name": "_partition",
                "type": "Identifier",
                "value": "_pId"
            }
        },
        "undocumented": true,
        "name": "_partition",
        "longname": "module:AssetModel~_partition",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51745,
                51767
            ],
            "filename": "Asset.js",
            "lineno": 1020,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002168",
                "name": "attributes",
                "type": "Identifier",
                "value": "attrValues"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "module:AssetModel~attributes",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                53344,
                53358
            ],
            "filename": "Asset.js",
            "lineno": 1049,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002296",
                "name": "attrsOrCb",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "attrsOrCb",
        "longname": "module:AssetModel~attrsOrCb",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "/**\n     * Callback executed when a Asset document is created and added to the MDB collection\n     *\n     * @function\n     * @type function\n     * @name createCb\n     * @callback module:AssetModel~createCb\n     * @param {?(string|Exception)}         error               Error that was thrown, or null for no error\n     * @param {Object}                      data                MDB document of the newly created Asset\n     * @param {module:AssetModel~ObjectId}  data._partition     ID of partition document this asset is associated to\n     *\n     * @example // Create a single asset without any attribute values defined\n     *  AssetModel.create( PartitionsObjectId, ( error, assetDoc ) => {\n     *      if( error ) \n     *          return console.error( `Error: ${error}` )\n     *\n     *      console.log( `The asset ${assetDoc.identifier} was successfully created` ) \n     *      // => The asset 56a3e5c72b46691213a8f319 was successfully created\n     *  })\n     * \n     * @example // Create a single asset in a partition with the primary field 'primaryAttr', using a callback\n     *  AssetModel.create( PartitionsObjectId, {\n     *      primaryAttr: 'asset-123',   // Primary (string) attribute (Providing callback function)\n     *      booleanAttr: false,         // Boolean attribute\n     *      numericAttr: 123            // Numeric attribute\n     *  }, ( error, assetDoc ) => {\n     *      if( error ) \n     *          return console.error( `Error: ${error}` )\n     *\n     *      console.log( `The asset ${assetDoc.identifier} was successfully created` ) \n     *      // => The asset asset-123 was successfully created\n     *  })\n     *\n     * @example // Create two assets\n     *  AssetModel.create( PartitionsObjectId, [{\n     *      stringAttr: 'Asset #1', // String attribute\n     *      booleanAttr: false,     // Boolean attribute\n     *      numericAttr: 123        // Numeric attribute\n     *  },{\n     *      stringAttr: 'Asset #2', // String attribute\n     *      booleanAttr: true,      // Boolean attribute\n     *      numericAttr: 456        // Numeric attribute\n     *  }], ( error, assetDocs ) => {\n     *      if( error ) \n     *          return console.error( `Error: ${error}` )\n     *\n     *      console.log( `The asset ${assetDoc.identifier} was successfully created` ) \n     *      // => The asset asset-123 was successfully created\n     *  })\n     */",
        "meta": {
            "range": [
                55326,
                57706
            ],
            "filename": "Asset.js",
            "lineno": 1096,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Callback executed when a Asset document is created and added to the MDB collection",
        "kind": "typedef",
        "type": {
            "names": [
                "function"
            ]
        },
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "name": "createCb",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "Exception"
                    ]
                },
                "nullable": true,
                "description": "Error that was thrown, or null for no error",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "MDB document of the newly created Asset",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "module:AssetModel~ObjectId"
                    ]
                },
                "description": "ID of partition document this asset is associated to",
                "name": "data._partition"
            }
        ],
        "examples": [
            "// Create a single asset without any attribute values defined\n AssetModel.create( PartitionsObjectId, ( error, assetDoc ) => {\n     if( error ) \n         return console.error( `Error: ${error}` )\n\n     console.log( `The asset ${assetDoc.identifier} was successfully created` ) \n     // => The asset 56a3e5c72b46691213a8f319 was successfully created\n })",
            "// Create a single asset in a partition with the primary field 'primaryAttr', using a callback\n AssetModel.create( PartitionsObjectId, {\n     primaryAttr: 'asset-123',   // Primary (string) attribute (Providing callback function)\n     booleanAttr: false,         // Boolean attribute\n     numericAttr: 123            // Numeric attribute\n }, ( error, assetDoc ) => {\n     if( error ) \n         return console.error( `Error: ${error}` )\n\n     console.log( `The asset ${assetDoc.identifier} was successfully created` ) \n     // => The asset asset-123 was successfully created\n })",
            "// Create two assets\n AssetModel.create( PartitionsObjectId, [{\n     stringAttr: 'Asset #1', // String attribute\n     booleanAttr: false,     // Boolean attribute\n     numericAttr: 123        // Numeric attribute\n },{\n     stringAttr: 'Asset #2', // String attribute\n     booleanAttr: true,      // Boolean attribute\n     numericAttr: 456        // Numeric attribute\n }], ( error, assetDocs ) => {\n     if( error ) \n         return console.error( `Error: ${error}` )\n\n     console.log( `The asset ${assetDoc.identifier} was successfully created` ) \n     // => The asset asset-123 was successfully created\n })"
        ],
        "memberof": "module:AssetModel",
        "longname": "module:AssetModel~createCb",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * Find an asset by its identifier - This isn't much different than the other asset searches, other than it just\n     * specifies the where object for you. If were provided an array of identifiers, then return an object, with the\n     * identifier value as the key, and only return the identifiers that were found to have assets - Meaning if an\n     * identifier was provided and no asset was found for it, then don't return it.\n     *\n     *\n     * @param   {object}                options                 Object with the partition ID and identifier\n     * @param   {function}              callback                Callback to execute, otherwise a promise is returned\n     * @param   {string}                options.partitionId     Partition ID (Mongoose doc ObjectId)\n     * @param   {string|number|array}   options.identifier      Primary field value to search for; A stringnumber will\n     *                                                          search for one asset, an array of strings/number will\n     *                                                          query for multiple\n     * @returns {Promise}   Promise returned, or callback executed\n     * @note    This is the same thing as Partition.findAssetByIdentifier(), except since this is a static method, the\n     *          partitions ID needs to be specified\n     * @todo    Should change this so the `options` parameter can accept the same thing as `options.identifier`\n     * \n     * @example  // Find a single ...\n     *  AssetModel.findByIdentifier({ \n     *      partitionId : 'd8i3nas0p3na1pvg98d763m',\n     *      identifier  : 'webserver.phx.ad' \n     *  })\n     *      .then( assetDoc => {\n     *          console.log( `Asset found` )\n     *          console.log( `\\t Document ObjectId   : ${assetDoc._id.toString()}` )\n     *          console.log( `\\t Document Identifier : ${assetDoc.identifier}` )\n     *      } )\n     *      .catch( error => console.error( `Error: ${error}` ) )\n     */",
        "meta": {
            "range": [
                59769,
                63192
            ],
            "filename": "Asset.js",
            "lineno": 1179,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002442",
                "name": "AssetSchema.statics.findByIdentifier",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "options",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Find an asset by its identifier - This isn't much different than the other asset searches, other than it just\nspecifies the where object for you. If were provided an array of identifiers, then return an object, with the\nidentifier value as the key, and only return the identifiers that were found to have assets - Meaning if an\nidentifier was provided and no asset was found for it, then don't return it.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object with the partition ID and identifier",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Callback to execute, otherwise a promise is returned",
                "name": "callback"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Partition ID (Mongoose doc ObjectId)",
                "name": "options.partitionId"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "number",
                        "array"
                    ]
                },
                "description": "Primary field value to search for; A stringnumber will\n                                                         search for one asset, an array of strings/number will\n                                                         query for multiple",
                "name": "options.identifier"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "Promise returned, or callback executed"
            }
        ],
        "tags": [
            {
                "originalTitle": "note",
                "title": "note",
                "text": "This is the same thing as Partition.findAssetByIdentifier(), except since this is a static method, the\n         partitions ID needs to be specified",
                "value": "This is the same thing as Partition.findAssetByIdentifier(), except since this is a static method, the\n         partitions ID needs to be specified"
            }
        ],
        "todo": [
            "Should change this so the `options` parameter can accept the same thing as `options.identifier`"
        ],
        "examples": [
            "// Find a single ...\n AssetModel.findByIdentifier({ \n     partitionId : 'd8i3nas0p3na1pvg98d763m',\n     identifier  : 'webserver.phx.ad' \n })\n     .then( assetDoc => {\n         console.log( `Asset found` )\n         console.log( `\\t Document ObjectId   : ${assetDoc._id.toString()}` )\n         console.log( `\\t Document Identifier : ${assetDoc.identifier}` )\n     } )\n     .catch( error => console.error( `Error: ${error}` ) )"
        ],
        "name": "statics.findByIdentifier",
        "longname": "module:AssetModel~AssetSchema.statics.findByIdentifier",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                60469,
                60502
            ],
            "filename": "Asset.js",
            "lineno": 1192,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002523",
                "name": "partitionId",
                "type": "MemberExpression",
                "value": "options.partitionId"
            }
        },
        "undocumented": true,
        "name": "partitionId",
        "longname": "<anonymous>~partitionId",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                60521,
                60553
            ],
            "filename": "Asset.js",
            "lineno": 1193,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002529",
                "name": "identifier",
                "type": "MemberExpression",
                "value": "options.identifier"
            }
        },
        "undocumented": true,
        "name": "identifier",
        "longname": "<anonymous>~identifier",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                60800,
                60864
            ],
            "filename": "Asset.js",
            "lineno": 1198,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002553",
                "name": "primaryField",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "primaryField",
        "longname": "<anonymous>~primaryField",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                61021,
                61070
            ],
            "filename": "Asset.js",
            "lineno": 1203,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002582",
                "name": "where",
                "type": "ObjectExpression",
                "value": "{\"undefined\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "where",
        "longname": "<anonymous>~where",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                61031,
                61068
            ],
            "filename": "Asset.js",
            "lineno": 1203,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002585",
                "name": "\"attributes._field\"",
                "type": "MemberExpression",
                "value": "primaryField._id"
            }
        },
        "undocumented": true,
        "name": "\"attributes._field\"",
        "longname": "<anonymous>~where.\"attributes._field\"",
        "kind": "member",
        "memberof": "<anonymous>~where",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                61243,
                61292
            ],
            "filename": "Asset.js",
            "lineno": 1207,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002596",
                "name": "where['attributes.value']",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{\"$in\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "'attributes.value']",
        "longname": "<anonymous>~where.'attributes.value']",
        "kind": "member",
        "memberof": "<anonymous>~where",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                61275,
                61290
            ],
            "filename": "Asset.js",
            "lineno": 1207,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002601",
                "name": "$in",
                "type": "Identifier",
                "value": "identifier"
            }
        },
        "undocumented": true,
        "name": "$in",
        "longname": "<anonymous>~where.'attributes.value'].$in",
        "kind": "member",
        "memberof": "<anonymous>~where.'attributes.value']",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                61373,
                61413
            ],
            "filename": "Asset.js",
            "lineno": 1211,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002604",
                "name": "where['attributes.value']",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "identifier",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "'attributes.value']",
        "longname": "<anonymous>~where.'attributes.value']",
        "kind": "member",
        "memberof": "<anonymous>~where",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                62179,
                62190
            ],
            "filename": "Asset.js",
            "lineno": 1222,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002661",
                "name": "result",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                62476,
                62575
            ],
            "filename": "Asset.js",
            "lineno": 1227,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002674",
                "name": "primaryAttr",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "primaryAttr",
        "longname": "<anonymous>~primaryAttr",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                62613,
                62645
            ],
            "filename": "Asset.js",
            "lineno": 1229,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002701",
                "name": "result[undefined]",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "ad",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~result.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Check if an attribute value exists for a specific field in a specific partition\n     *\n     * @param   {object}    data                Object with partition/field/value\n     * @param   {function}  callback            Callback to fire (or a promise is returned)\n     * @var     {string}    data.partitionId    Partition ID to query (can also be passed as data.partition)\n     * @var     {Mixed}     data.value          Value to check (can also be passed as data.val)\n     * @var     {string}    data.field          Field being validated (can also be passed as data.attr and\n     *                                          data.attribute)\n     * @returns {Promise}\n     */",
        "meta": {
            "range": [
                63275,
                63956
            ],
            "filename": "Asset.js",
            "lineno": 1248,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Check if an attribute value exists for a specific field in a specific partition",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object with partition/field/value",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Callback to fire (or a promise is returned)",
                "name": "callback"
            }
        ],
        "kind": "member",
        "name": "field",
        "type": {
            "names": [
                "string"
            ]
        },
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "data",
        "longname": "data.field",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                63961,
                67393
            ],
            "filename": "Asset.js",
            "lineno": 1259,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002742",
                "name": "AssetSchema.statics.isAttrValueUnique",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "data",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "statics.isAttrValueUnique",
        "longname": "module:AssetModel~AssetSchema.statics.isAttrValueUnique",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                64092,
                64140
            ],
            "filename": "Asset.js",
            "lineno": 1261,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002762",
                "name": "partitionId",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "partitionId",
        "longname": "<anonymous>~partitionId",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                64157,
                64212
            ],
            "filename": "Asset.js",
            "lineno": 1262,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002772",
                "name": "field",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "field",
        "longname": "<anonymous>~field",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                64229,
                64328
            ],
            "filename": "Asset.js",
            "lineno": 1263,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002786",
                "name": "value",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "<anonymous>~value",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                64342,
                64378
            ],
            "filename": "Asset.js",
            "lineno": 1267,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002804",
                "name": "partitionId",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "partitionId",
        "longname": "module:AssetModel~partitionId",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                64391,
                64415
            ],
            "filename": "Asset.js",
            "lineno": 1268,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002811",
                "name": "field",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "field",
        "longname": "module:AssetModel~field",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65347,
                65382
            ],
            "filename": "Asset.js",
            "lineno": 1286,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002855",
                "name": "where",
                "type": "ObjectExpression",
                "value": "{\"_partition\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "where",
        "longname": "<anonymous>~where",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65357,
                65380
            ],
            "filename": "Asset.js",
            "lineno": 1286,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002858",
                "name": "_partition",
                "type": "Identifier",
                "value": "partitionId"
            }
        },
        "undocumented": true,
        "name": "_partition",
        "longname": "<anonymous>~where._partition",
        "kind": "member",
        "memberof": "<anonymous>~where",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65664,
                65697
            ],
            "filename": "Asset.js",
            "lineno": 1293,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002892",
                "name": "where._id",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{\"$nin\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_id",
        "longname": "<anonymous>~where._id",
        "kind": "member",
        "memberof": "<anonymous>~where",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65678,
                65695
            ],
            "filename": "Asset.js",
            "lineno": 1293,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002897",
                "name": "$nin",
                "type": "MemberExpression",
                "value": "data.ignore"
            }
        },
        "undocumented": true,
        "name": "$nin",
        "longname": "<anonymous>~where._id.$nin",
        "kind": "member",
        "memberof": "<anonymous>~where._id",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                66081,
                66113
            ],
            "filename": "Asset.js",
            "lineno": 1302,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002919",
                "name": "where._id",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{\"$ne\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_id",
        "longname": "<anonymous>~where._id",
        "kind": "member",
        "memberof": "<anonymous>~where",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                66095,
                66111
            ],
            "filename": "Asset.js",
            "lineno": 1302,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002924",
                "name": "$ne",
                "type": "MemberExpression",
                "value": "data.ignore"
            }
        },
        "undocumented": true,
        "name": "$ne",
        "longname": "<anonymous>~where._id.$ne",
        "kind": "member",
        "memberof": "<anonymous>~where._id",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                66538,
                66563
            ],
            "filename": "Asset.js",
            "lineno": 1314,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002950",
                "name": "path",
                "type": "Literal",
                "value": "attributes._field"
            }
        },
        "undocumented": true,
        "name": "path",
        "longname": "module:AssetModel~path",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                66586,
                66617
            ],
            "filename": "Asset.js",
            "lineno": 1315,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002952",
                "name": "match",
                "type": "ObjectExpression",
                "value": "{\"name\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "match",
        "longname": "module:AssetModel~match",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                66595,
                66615
            ],
            "filename": "Asset.js",
            "lineno": 1315,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002954",
                "name": "name",
                "type": "ObjectExpression",
                "value": "{\"$eq\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "module:AssetModel~match.name",
        "kind": "member",
        "memberof": "module:AssetModel~match",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                66603,
                66613
            ],
            "filename": "Asset.js",
            "lineno": 1315,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100002956",
                "name": "$eq",
                "type": "Identifier",
                "value": "field"
            }
        },
        "undocumented": true,
        "name": "$eq",
        "longname": "module:AssetModel~match.name.$eq",
        "kind": "member",
        "memberof": "module:AssetModel~match.name",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Query for assets in a partition, returning a ODM document for each asset found\n     *\n     * @param   {string|array}  assetId     String specifying a specific asset ID, or an array of multiple asset IDs\n     * @param   {function}      callback    Callback to execute, otherwise a promise is returned\n     * @note    The selectors are used as an 'AND' query, meaning: where partition = x AND asset = y\n     * @todo    Add the ability to filter for assets, if a find static method isn't created\n     * @return  {Promise}   With an array of Mongoose documents (assets), or callback executed\n     */",
        "meta": {
            "range": [
                68087,
                69707
            ],
            "filename": "Asset.js",
            "lineno": 1344,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003029",
                "name": "AssetSchema.statics.getAssets",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "assetId",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Query for assets in a partition, returning a ODM document for each asset found",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "array"
                    ]
                },
                "description": "String specifying a specific asset ID, or an array of multiple asset IDs",
                "name": "assetId"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Callback to execute, otherwise a promise is returned",
                "name": "callback"
            }
        ],
        "tags": [
            {
                "originalTitle": "note",
                "title": "note",
                "text": "The selectors are used as an 'AND' query, meaning: where partition = x AND asset = y",
                "value": "The selectors are used as an 'AND' query, meaning: where partition = x AND asset = y"
            }
        ],
        "todo": [
            "Add the ability to filter for assets, if a find static method isn't created"
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "With an array of Mongoose documents (assets), or callback executed"
            }
        ],
        "name": "statics.getAssets",
        "longname": "module:AssetModel~AssetSchema.statics.getAssets",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68306,
                68316
            ],
            "filename": "Asset.js",
            "lineno": 1347,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003049",
                "name": "where",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "where",
        "longname": "<anonymous>~where",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68458,
                68477
            ],
            "filename": "Asset.js",
            "lineno": 1351,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003060",
                "name": "where._id",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "assetId",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_id",
        "longname": "<anonymous>~where._id",
        "kind": "member",
        "memberof": "<anonymous>~where",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68870,
                68898
            ],
            "filename": "Asset.js",
            "lineno": 1359,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003094",
                "name": "where._id",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{\"$in\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_id",
        "longname": "<anonymous>~where._id",
        "kind": "member",
        "memberof": "<anonymous>~where",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68884,
                68896
            ],
            "filename": "Asset.js",
            "lineno": 1359,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003099",
                "name": "$in",
                "type": "Identifier",
                "value": "assetId"
            }
        },
        "undocumented": true,
        "name": "$in",
        "longname": "<anonymous>~where._id.$in",
        "kind": "member",
        "memberof": "<anonymous>~where._id",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                69528,
                69543
            ],
            "filename": "Asset.js",
            "lineno": 1373,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003164",
                "name": "path",
                "type": "Literal",
                "value": "_fields"
            }
        },
        "undocumented": true,
        "name": "path",
        "longname": "module:AssetModel~path",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "/**\n     * Retrieve all or one\n     *\n     *\n     * AssetModel.getPartitionsAssets( 'Some Partition Name' )\n     *      .then( assetDocs => {\n     *          \n     *      })\n     *      .catch( error => console.error( `Error retrieving assets - ${error.message}`))\n     */",
        "meta": {
            "range": [
                70067,
                71746
            ],
            "filename": "Asset.js",
            "lineno": 1391,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003185",
                "name": "AssetSchema.statics.getPartitionsAssets",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "partition",
                    "attributesOrCb",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Retrieve all or one\n\n\nAssetModel.getPartitionsAssets( 'Some Partition Name' )\n     .then( assetDocs => {\n         \n     })\n     .catch( error => console.error( `Error retrieving assets - ${error.message}`))",
        "name": "statics.getPartitionsAssets",
        "longname": "module:AssetModel~AssetSchema.statics.getPartitionsAssets",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                70363,
                70407
            ],
            "filename": "Asset.js",
            "lineno": 1396,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003220",
                "name": "where",
                "type": "ObjectExpression",
                "value": "{\"_partition\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "where",
        "longname": "<anonymous>~where",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                70373,
                70405
            ],
            "filename": "Asset.js",
            "lineno": 1396,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003223",
                "name": "_partition",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_partition",
        "longname": "<anonymous>~where._partition",
        "kind": "member",
        "memberof": "<anonymous>~where",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                70695,
                70706
            ],
            "filename": "Asset.js",
            "lineno": 1406,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003266",
                "name": "result",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                70982,
                71004
            ],
            "filename": "Asset.js",
            "lineno": 1411,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003284",
                "name": "statics",
                "type": "ArrayExpression",
                "value": "[\"status\"]"
            }
        },
        "undocumented": true,
        "name": "statics",
        "longname": "<anonymous>~statics",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71157,
                71205
            ],
            "filename": "Asset.js",
            "lineno": 1414,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003289",
                "name": "statics",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "statics",
        "longname": "module:AssetModel~statics",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71400,
                71478
            ],
            "filename": "Asset.js",
            "lineno": 1418,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003306",
                "name": "filteredStatics",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "filteredStatics",
        "longname": "<anonymous>~filteredStatics",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * When assets are returned from a query, they are returned as an array of objects. If the partition has a primary\n     * field defined, then this can be used to restructure the asset collection from an array of objects, into an object\n     * of objects, with the assets identifier as the keys. This is essentially just a wrapper that loops over the asset\n     * documents, and using the Asset models `identifier` virtual property.\n     *\n     * @param   {array}     collection  Collection of assets (Array from a query)\n     * @returns {object}    The restructured object is returned\n     * @note    This is setup as an instance method, so the partitions primary field ID can be grabbed without having\n     *          to execute another query\n     * @note    If the partition does NOT have a primary field, then the assets ID will be used as the identifier\n     * @note    Any errors will throw a new Error()\n     */",
        "meta": {
            "range": [
                72759,
                73033
            ],
            "filename": "Asset.js",
            "lineno": 1445,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003348",
                "name": "AssetSchema.statics.setIdentifiers",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "collection"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "When assets are returned from a query, they are returned as an array of objects. If the partition has a primary\nfield defined, then this can be used to restructure the asset collection from an array of objects, into an object\nof objects, with the assets identifier as the keys. This is essentially just a wrapper that loops over the asset\ndocuments, and using the Asset models `identifier` virtual property.",
        "params": [
            {
                "type": {
                    "names": [
                        "array"
                    ]
                },
                "description": "Collection of assets (Array from a query)",
                "name": "collection"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The restructured object is returned"
            }
        ],
        "tags": [
            {
                "originalTitle": "note",
                "title": "note",
                "text": "This is setup as an instance method, so the partitions primary field ID can be grabbed without having\n         to execute another query",
                "value": "This is setup as an instance method, so the partitions primary field ID can be grabbed without having\n         to execute another query"
            },
            {
                "originalTitle": "note",
                "title": "note",
                "text": "If the partition does NOT have a primary field, then the assets ID will be used as the identifier",
                "value": "If the partition does NOT have a primary field, then the assets ID will be used as the identifier"
            },
            {
                "originalTitle": "note",
                "title": "note",
                "text": "Any errors will throw a new Error()",
                "value": "Any errors will throw a new Error()"
            }
        ],
        "name": "statics.setIdentifiers",
        "longname": "module:AssetModel~AssetSchema.statics.setIdentifiers",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Retrieve a specific asset by the asset documents ObjectId\n     *\n     * @function    module:AssetModel.get\n     * @alias       module:AssetModel.getAsset\n     * @alias       module:AssetModel.findAsset\n     * @memberof    module:AssetModel\n     * @this        module:AssetModel\n     * @name        module:AssetModel.get\n     * @param       {module:AssetModel~ObjectId}    assetId     Assets document Object Id or primary value (If parent \n     *                                                          partition has one)\n     * @param       {module:AssetModel~getCb=}      callback    Callback to fire, or a promise is returned\n     * @returns     {Promise}   Promise returned, or callback executed if provided\n     * @todo        Allow this to work with the assets identifier\n     */",
        "meta": {
            "range": [
                73116,
                73912
            ],
            "filename": "Asset.js",
            "lineno": 1454,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Retrieve a specific asset by the asset documents ObjectId",
        "kind": "function",
        "name": "get",
        "alias": "module:AssetModel.findAsset",
        "memberof": "module:AssetModel",
        "this": "module:AssetModel",
        "params": [
            {
                "type": {
                    "names": [
                        "module:AssetModel~ObjectId"
                    ]
                },
                "description": "Assets document Object Id or primary value (If parent \n                                                         partition has one)",
                "name": "assetId"
            },
            {
                "type": {
                    "names": [
                        "module:AssetModel~getCb"
                    ]
                },
                "optional": true,
                "description": "Callback to fire, or a promise is returned",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "Promise returned, or callback executed if provided"
            }
        ],
        "todo": [
            "Allow this to work with the assets identifier"
        ],
        "longname": "module:AssetModel.get",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                73917,
                75639
            ],
            "filename": "Asset.js",
            "lineno": 1469,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003387",
                "name": "AssetSchema.statics.get",
                "type": "AssignmentExpression",
                "funcscope": "module:AssetModel",
                "value": "AssetSchema.statics.getAsset",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "statics.get",
        "longname": "module:AssetModel~AssetSchema.statics.get",
        "kind": "member",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                73943,
                75639
            ],
            "filename": "Asset.js",
            "lineno": 1469,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003393",
                "name": "AssetSchema.statics.getAsset",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "assetId",
                    "callback"
                ]
            },
            "vars": {
                "exc": "module:AssetModel~AssetSchema.statics.getAsset~exc",
                "": null
            }
        },
        "undocumented": true,
        "name": "statics.getAsset",
        "longname": "module:AssetModel~AssetSchema.statics.getAsset",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74017,
                74043
            ],
            "filename": "Asset.js",
            "lineno": 1470,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003404",
                "name": "exc",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "exc",
        "longname": "module:AssetModel~AssetSchema.statics.getAsset~exc",
        "kind": "member",
        "memberof": "module:AssetModel~AssetSchema.statics.getAsset",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * Callback executed when a single asset document is queried via the static AssetSchema.get method\n     *\n     * @function\n     * @type function\n     * @name getCb\n     * @callback module:AssetModel~getCb\n     * @param {?(string|Exception)}         error       Error that was thrown, or null for no error\n     * @param {?Object}                     data        MongoDb document of Asset found, or null if none found\n     * @param {module:AssetModel~ObjectId}  data._id    Asset ID\n     *\n     * @example // Create a single asset without any attribute values defined\n     *  AssetModel.get( 'd8i3nas0p3na1pvg98d763m', ( error, assetDoc ) =>{\n     *      if( error )\n     *          return console.error( 'Error:', error )\n     *      \n     *      console.log( 'Asset Returned:', assetDoc.identifier )\n     *      // => Asset Returned: d8i3nas0p3na1pvg98d763m\n     *  } )\n     */",
        "meta": {
            "range": [
                75645,
                76530
            ],
            "filename": "Asset.js",
            "lineno": 1511,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Callback executed when a single asset document is queried via the static AssetSchema.get method",
        "kind": "typedef",
        "type": {
            "names": [
                "function"
            ]
        },
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "name": "getCb",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "Exception"
                    ]
                },
                "nullable": true,
                "description": "Error that was thrown, or null for no error",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "MongoDb document of Asset found, or null if none found",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "module:AssetModel~ObjectId"
                    ]
                },
                "description": "Asset ID",
                "name": "data._id"
            }
        ],
        "examples": [
            "// Create a single asset without any attribute values defined\n AssetModel.get( 'd8i3nas0p3na1pvg98d763m', ( error, assetDoc ) =>{\n     if( error )\n         return console.error( 'Error:', error )\n     \n     console.log( 'Asset Returned:', assetDoc.identifier )\n     // => Asset Returned: d8i3nas0p3na1pvg98d763m\n } )"
        ],
        "memberof": "module:AssetModel",
        "longname": "module:AssetModel~getCb",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * Find multiple assets, given specific criteria\n     *\n     * @function    module:AssetModel.find\n     * @memberof    module:AssetModel\n     * @this        module:AssetModel\n     * @name        module:AssetModel.find\n     * @param       {(Object|string)}               criteria    Search criteria\n     * @param       {module:AssetModel~findCb=}     callback    Callback to fire, or a promise is returned\n     * @returns     {Promise}   Promise returned, or callback executed if provided\n     */",
        "meta": {
            "range": [
                76613,
                77116
            ],
            "filename": "Asset.js",
            "lineno": 1534,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Find multiple assets, given specific criteria",
        "kind": "function",
        "name": "find",
        "memberof": "module:AssetModel",
        "this": "module:AssetModel",
        "params": [
            {
                "type": {
                    "names": [
                        "Object",
                        "string"
                    ]
                },
                "description": "Search criteria",
                "name": "criteria"
            },
            {
                "type": {
                    "names": [
                        "module:AssetModel~findCb"
                    ]
                },
                "optional": true,
                "description": "Callback to fire, or a promise is returned",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "Promise returned, or callback executed if provided"
            }
        ],
        "longname": "module:AssetModel.find",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77121,
                77278
            ],
            "filename": "Asset.js",
            "lineno": 1545,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003498",
                "name": "AssetSchema.statics.getMany",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "criteria",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "statics.getMany",
        "longname": "module:AssetModel~AssetSchema.statics.getMany",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Callback executed when one or more asset documents are returned from the static AssetSchema.find method\n     *\n     * @function\n     * @type function\n     * @name findCb\n     * @callback module:AssetModel~findCb\n     * @param {?(string|Exception)}         error       Error that was thrown, or null for no error\n     * @param {?Object}                     data        MongoDb document of Asset found, or null if none found\n     * @param {module:AssetModel~ObjectId}  data._id    Asset ID\n     *\n     * @example // Find all unlocked assets in the partition with the ID a8icnasdp3ng1pve98dg63c\n     *  AssetModel.find( { \n     *      _partition: 'a8icnasdp3ng1pve98dg63c',\n     *       status: 'unlocked' \n     *  }, ( error, assetDocs ) =>{\n     *      if( error )\n     *          return console.error( 'Error:', error )\n     *      \n     *      console.log( 'Number of Asset Returned:', _.size( assetDocs ) )\n     *      // => Number of Asset Returned: 12\n     *  } )\n     */",
        "meta": {
            "range": [
                77284,
                78270
            ],
            "filename": "Asset.js",
            "lineno": 1551,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Callback executed when one or more asset documents are returned from the static AssetSchema.find method",
        "kind": "typedef",
        "type": {
            "names": [
                "function"
            ]
        },
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "name": "findCb",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "Exception"
                    ]
                },
                "nullable": true,
                "description": "Error that was thrown, or null for no error",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "MongoDb document of Asset found, or null if none found",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "module:AssetModel~ObjectId"
                    ]
                },
                "description": "Asset ID",
                "name": "data._id"
            }
        ],
        "examples": [
            "// Find all unlocked assets in the partition with the ID a8icnasdp3ng1pve98dg63c\n AssetModel.find( { \n     _partition: 'a8icnasdp3ng1pve98dg63c',\n      status: 'unlocked' \n }, ( error, assetDocs ) =>{\n     if( error )\n         return console.error( 'Error:', error )\n     \n     console.log( 'Number of Asset Returned:', _.size( assetDocs ) )\n     // => Number of Asset Returned: 12\n } )"
        ],
        "memberof": "module:AssetModel",
        "longname": "module:AssetModel~findCb",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * Find a single asset, this is essentially the same as the static [find]{@link module:AssetModel.find} method, \n     * except only the first result is returned.\n     *\n     * @function    module:AssetModel.findOne\n     * @memberof    module:AssetModel\n     * @this        module:AssetModel\n     * @name        module:AssetModel.findOne\n     * @param       {(Object|string)}               criteria    Search criteria\n     * @param       {module:AssetModel~findCb=}     callback    Callback to fire, or a promise is returned\n     * @returns     {Promise}   Promise returned, or callback executed if provided\n     */",
        "meta": {
            "range": [
                78353,
                78975
            ],
            "filename": "Asset.js",
            "lineno": 1577,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Find a single asset, this is essentially the same as the static [find]{@link module:AssetModel.find} method, \nexcept only the first result is returned.",
        "kind": "function",
        "name": "findOne",
        "memberof": "module:AssetModel",
        "this": "module:AssetModel",
        "params": [
            {
                "type": {
                    "names": [
                        "Object",
                        "string"
                    ]
                },
                "description": "Search criteria",
                "name": "criteria"
            },
            {
                "type": {
                    "names": [
                        "module:AssetModel~findCb"
                    ]
                },
                "optional": true,
                "description": "Callback to fire, or a promise is returned",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "Promise returned, or callback executed if provided"
            }
        ],
        "longname": "module:AssetModel.findOne",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                78980,
                79138
            ],
            "filename": "Asset.js",
            "lineno": 1589,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003520",
                "name": "AssetSchema.statics.findOnea",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "criteria",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "statics.findOnea",
        "longname": "module:AssetModel~AssetSchema.statics.findOnea",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Callback executed when a single asset document is queried via the static [findOne]{@link module:AssetModel.findOne} method\n     *\n     * @function\n     * @type function\n     * @name findOneCb\n     * @callback module:AssetModel~findOneCb\n     * @param {?(string|Exception)}         error       Error that was thrown, or null for no error\n     * @param {?Object}                     data        MongoDb document of Asset found, or null if none found\n     * @param {module:AssetModel~ObjectId}  data._id    Asset ID\n     *\n     * @example // Create a single asset without any attribute values defined\n     *  AssetModel.findOne( 'd8i3nas0p3na1pvg98d763m', ( error, assetDoc ) =>{\n     *      if( error )\n     *          return console.error( 'Error:', error )\n     *      \n     *      console.log( 'Asset Returned:', assetDoc.identifier )\n     *      // => Asset Returned: d8i3nas0p3na1pvg98d763m\n     *  } )\n     */",
        "meta": {
            "range": [
                79144,
                80068
            ],
            "filename": "Asset.js",
            "lineno": 1595,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Callback executed when a single asset document is queried via the static [findOne]{@link module:AssetModel.findOne} method",
        "kind": "typedef",
        "type": {
            "names": [
                "function"
            ]
        },
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "name": "findOneCb",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "Exception"
                    ]
                },
                "nullable": true,
                "description": "Error that was thrown, or null for no error",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "MongoDb document of Asset found, or null if none found",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "module:AssetModel~ObjectId"
                    ]
                },
                "description": "Asset ID",
                "name": "data._id"
            }
        ],
        "examples": [
            "// Create a single asset without any attribute values defined\n AssetModel.findOne( 'd8i3nas0p3na1pvg98d763m', ( error, assetDoc ) =>{\n     if( error )\n         return console.error( 'Error:', error )\n     \n     console.log( 'Asset Returned:', assetDoc.identifier )\n     // => Asset Returned: d8i3nas0p3na1pvg98d763m\n } )"
        ],
        "memberof": "module:AssetModel",
        "longname": "module:AssetModel~findOneCb",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * Delete one or more assets by the Asset ObjectIds, unlike the Partition models delete method, this doesn't\n     * require a Partition object\n     *\n     * @function    module:AssetModel.delete\n     * @memberof    module:AssetModel\n     * @this        module:AssetModel\n     * @name        module:AssetModel.delete\n     *\n     * @param   {(*|module:AssetModel~ObjectId)}        options             Options with asset ObjectIds and other options; \n     *                                                                      A string for a single asset ObjectId; Or an \n     *                                                                      array of ObjectIds for multiple assets\n     * @param   {string=}                               options.comment     Remark on why the asset(s) were deleted\n     * @param   {module:AssetModel~deleteStaticCb=}     callback            Callback to execute (optional)\n     * @return  {Promise}   On success, an array of asset data is returned, if requireDelete is false,\n     *                      and no assets were found/deleted, then null is returned\n     * @todo  Determine what data is handed to the promise (last asset document data? asset ID? nothing?)\n     *\n     * @example // Delete a single asset (handled as a promise) via the asset ID\n     *  AssetModel.delete( '56d0819b655baf4a4a7f9cad' )\n     *      .then( data => {\n     *          console.log( `Deleted ....??` )\n     *          // => Deleted\n     *      })\n     *      .catch( error => console.error( `Error: ${error}` ) )\n     *\n     * @example // Delete two assets (handled as a promise) via one asset ID and one asset primary value\n     *  AssetModel.delete( [\n     *      '56d0819b655baf4a4a7f9cad', 'asset-123'\n     *  ] )\n     *      .then( data => {\n     *          console.log( `Deleted ....??` )\n     *          // => Deleted\n     *      })\n     *      .catch( error => console.error( `Error: ${error}` ) )\n     * \n     * @example // Same as previous example, except the options parameter is an object, and a comment is specified\n     *  AssetModel.delete( {\n     *      assetIds : [ '56d0819b655baf4a4a7f9cad', 'asset-123' ],\n     *      comment  : 'Deleting a few assets, because I feel like it'\n     *  })\n     *      .then( data => {\n     *          console.log( `Deleted ....??` )\n     *          // => Deleted\n     *      })\n     *      .catch( error => console.error( 'Error:', error )\n     */",
        "meta": {
            "range": [
                80151,
                82577
            ],
            "filename": "Asset.js",
            "lineno": 1618,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Delete one or more assets by the Asset ObjectIds, unlike the Partition models delete method, this doesn't\nrequire a Partition object",
        "kind": "function",
        "name": "delete",
        "memberof": "module:AssetModel",
        "this": "module:AssetModel",
        "params": [
            {
                "type": {
                    "names": [
                        "*",
                        "module:AssetModel~ObjectId"
                    ]
                },
                "description": "Options with asset ObjectIds and other options; \n                                                                     A string for a single asset ObjectId; Or an \n                                                                     array of ObjectIds for multiple assets",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Remark on why the asset(s) were deleted",
                "name": "options.comment"
            },
            {
                "type": {
                    "names": [
                        "module:AssetModel~deleteStaticCb"
                    ]
                },
                "optional": true,
                "description": "Callback to execute (optional)",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "On success, an array of asset data is returned, if requireDelete is false,\n                     and no assets were found/deleted, then null is returned"
            }
        ],
        "todo": [
            "Determine what data is handed to the promise (last asset document data? asset ID? nothing?)"
        ],
        "examples": [
            "// Delete a single asset (handled as a promise) via the asset ID\n AssetModel.delete( '56d0819b655baf4a4a7f9cad' )\n     .then( data => {\n         console.log( `Deleted ....??` )\n         // => Deleted\n     })\n     .catch( error => console.error( `Error: ${error}` ) )",
            "// Delete two assets (handled as a promise) via one asset ID and one asset primary value\n AssetModel.delete( [\n     '56d0819b655baf4a4a7f9cad', 'asset-123'\n ] )\n     .then( data => {\n         console.log( `Deleted ....??` )\n         // => Deleted\n     })\n     .catch( error => console.error( `Error: ${error}` ) )",
            "// Same as previous example, except the options parameter is an object, and a comment is specified\n AssetModel.delete( {\n     assetIds : [ '56d0819b655baf4a4a7f9cad', 'asset-123' ],\n     comment  : 'Deleting a few assets, because I feel like it'\n })\n     .then( data => {\n         console.log( `Deleted ....??` )\n         // => Deleted\n     })\n     .catch( error => console.error( 'Error:', error )"
        ],
        "longname": "module:AssetModel.delete",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                82582,
                85622
            ],
            "filename": "Asset.js",
            "lineno": 1665,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003542",
                "name": "AssetSchema.statics.delete",
                "type": "FunctionExpression",
                "funcscope": "module:AssetModel",
                "paramnames": [
                    "options",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "statics.delete",
        "longname": "module:AssetModel~AssetSchema.statics.delete",
        "kind": "function",
        "memberof": "module:AssetModel~AssetSchema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                82704,
                82712
            ],
            "filename": "Asset.js",
            "lineno": 1667,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003562",
                "name": "assetIds"
            }
        },
        "undocumented": true,
        "name": "assetIds",
        "longname": "<anonymous>~assetIds",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                82729,
                82750
            ],
            "filename": "Asset.js",
            "lineno": 1668,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003565",
                "name": "requireDelete",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "requireDelete",
        "longname": "<anonymous>~requireDelete",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83196,
                83223
            ],
            "filename": "Asset.js",
            "lineno": 1678,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003588",
                "name": "assetIds",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "options.assetIds",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "assetIds",
        "longname": "module:AssetModel~assetIds",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83289,
                83413
            ],
            "filename": "Asset.js",
            "lineno": 1681,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003594",
                "name": "requireDelete",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "requireDelete",
        "longname": "module:AssetModel~requireDelete",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83573,
                83591
            ],
            "filename": "Asset.js",
            "lineno": 1687,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003622",
                "name": "assetIds",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "options",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "assetIds",
        "longname": "module:AssetModel~assetIds",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83908,
                83944
            ],
            "filename": "Asset.js",
            "lineno": 1695,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003631",
                "name": "results",
                "type": "ObjectExpression",
                "value": "{\"deleted\":\"\",\"error\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "results",
        "longname": "<anonymous>~results",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83920,
                83931
            ],
            "filename": "Asset.js",
            "lineno": 1695,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003634",
                "name": "deleted",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "deleted",
        "longname": "<anonymous>~results.deleted",
        "kind": "member",
        "memberof": "<anonymous>~results",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83933,
                83942
            ],
            "filename": "Asset.js",
            "lineno": 1695,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003636",
                "name": "error",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "error",
        "longname": "<anonymous>~results.error",
        "kind": "member",
        "memberof": "<anonymous>~results",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                85244,
                85284
            ],
            "filename": "Asset.js",
            "lineno": 1724,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {
                "id": "astnode100003713",
                "name": "results",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "results",
        "longname": "module:AssetModel~results",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:AssetModel"
    },
    {
        "comment": "/**\n     * Callback executed when static method module:AssetModel.delete is executed and provided a callback\n     *\n     * @function\n     * @type function\n     * @name deleteStaticCb\n     * @callback module:AssetModel~deleteStaticCb\n     * @param {?(string|Exception)} error               Error that was thrown, or null for no error\n     * @param {Object}              data                MDB document of the newly created Asset\n     * @todo  Determine what data is handed to the data parameter\n     *\n     * @example // Delete one asset, using the assets ObjectId\n     *  AssetModel.delete( '56d0819b655baf4a4a7f9cad', ( error, data ) => {\n     *      if( error ) \n     *          return console.error( `Error: ${error}` )\n     *\n     *      console.log( `Deleted ....??` )\n     *      // => Deleted\n     *  } )\n     * \n     * @example // Delete two assets (handled as a callback) via the primary value for one, and ObjectId for the other asset\n     *  AssetModel.delete( [\n     *      '56d0819b655baf4a4a7f9cad', 'asset-123'\n     *  ], ( error, data ) => {\n     *      if( error ) \n     *          return console.error( `Error: ${error}` )\n     *\n     *      console.log( `Deleted ....??` )\n     *      // => Deleted\n     *  } )\n     * \n     * @example // Same as previous example, except the options parameter is an object, and a comment is specified\n     *  AssetModel.delete( {\n     *      assetIds : [ '56d0819b655baf4a4a7f9cad', 'asset-123' ],\n     *      comment  : 'Deleting a few assets, because I feel like it'\n     *  }, ( error, data ) => {\n     *      if( error ) \n     *          return console.error( `Error: ${error}` )\n     *\n     *      console.log( `Deleted ....??` )\n     *      // => Deleted\n     *  } )\n     */",
        "meta": {
            "range": [
                85628,
                87361
            ],
            "filename": "Asset.js",
            "lineno": 1736,
            "path": "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models",
            "code": {}
        },
        "description": "Callback executed when static method module:AssetModel.delete is executed and provided a callback",
        "kind": "typedef",
        "type": {
            "names": [
                "function"
            ]
        },
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "name": "deleteStaticCb",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "Exception"
                    ]
                },
                "nullable": true,
                "description": "Error that was thrown, or null for no error",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "MDB document of the newly created Asset",
                "name": "data"
            }
        ],
        "todo": [
            "Determine what data is handed to the data parameter"
        ],
        "examples": [
            "// Delete one asset, using the assets ObjectId\n AssetModel.delete( '56d0819b655baf4a4a7f9cad', ( error, data ) => {\n     if( error ) \n         return console.error( `Error: ${error}` )\n\n     console.log( `Deleted ....??` )\n     // => Deleted\n } )",
            "// Delete two assets (handled as a callback) via the primary value for one, and ObjectId for the other asset\n AssetModel.delete( [\n     '56d0819b655baf4a4a7f9cad', 'asset-123'\n ], ( error, data ) => {\n     if( error ) \n         return console.error( `Error: ${error}` )\n\n     console.log( `Deleted ....??` )\n     // => Deleted\n } )",
            "// Same as previous example, except the options parameter is an object, and a comment is specified\n AssetModel.delete( {\n     assetIds : [ '56d0819b655baf4a4a7f9cad', 'asset-123' ],\n     comment  : 'Deleting a few assets, because I feel like it'\n }, ( error, data ) => {\n     if( error ) \n         return console.error( `Error: ${error}` )\n\n     console.log( `Deleted ....??` )\n     // => Deleted\n } )"
        ],
        "memberof": "module:AssetModel",
        "longname": "module:AssetModel~deleteStaticCb",
        "scope": "inner"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "/Users/jhyland/Documents/scripts/node/personal/sasset-core-beta/models/Asset.js"
        ]
    }
]
